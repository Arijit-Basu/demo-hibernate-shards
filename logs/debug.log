[DEBUG] 2015-08-06 15:54:17,107(1410) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 15:54:17,108(1411) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 15:54:17,109(1412) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 15:54:17,109(1412) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 15:54:17,110(1413) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 15:54:17,110(1413) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 15:54:17,125(1428) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 15:54:17,125(1428) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 15:54:17,125(1428) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 15:54:17,126(1429) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 15:54:17,126(1429) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 15:54:17,130(1433) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 15:54:17,131(1434) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 15:54:17,131(1434) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 15:54:17,131(1434) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 15:54:17,131(1434) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 15:54:17,131(1434) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 15:54:17,132(1435) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=1}  
[DEBUG] 2015-08-06 15:54:17,132(1435) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 15:54:17,151(1454) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards2, Isolation Level: 4  
[INFO ] 2015-08-06 15:54:17,151(1454) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 15:54:17,152(1455) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 15:54:17,152(1455) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 15:54:17,152(1455) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 15:54:17,152(1455) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 15:54:17,152(1455) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 15:54:17,152(1455) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 15:54:17,153(1456) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 15:54:17,154(1457) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 15:54:17,155(1458) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 15:54:17,159(1462) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 15:54:17,159(1462) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[WARN ] 2015-08-06 15:54:17,160(1463) org.hibernate.type.TypeFactory$TypeScopeImpl.injectSessionFactory(TypeFactory.java:69) –> [main] Scoping types to session factory org.hibernate.impl.SessionFactoryImpl@1eb9fde after already scoped org.hibernate.impl.SessionFactoryImpl@1b7a553  
[DEBUG] 2015-08-06 15:54:17,160(1463) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@102799c  
[DEBUG] 2015-08-06 15:54:17,160(1463) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@102799c  
[DEBUG] 2015-08-06 15:54:17,160(1463) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@102799c  
[DEBUG] 2015-08-06 15:54:17,160(1463) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1171b26  
[DEBUG] 2015-08-06 15:54:17,160(1463) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@1a42792  
[DEBUG] 2015-08-06 15:54:17,160(1463) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@12a55aa  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@1e0f2f6  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@1e0f2f6  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1e0f2f6  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@13f991  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@13f991  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@13f991  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1878144  
[DEBUG] 2015-08-06 15:54:17,161(1464) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1878144  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1878144  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@19bfb30  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@19bfb30  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@19bfb30  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@15c07d8  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@15c07d8  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@15c07d8  
[DEBUG] 2015-08-06 15:54:17,162(1465) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@8ab708  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@8ab708  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@8ab708  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1649b44  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1649b44  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1649b44  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@15e0873  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@15e0873  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@b7ec5d  
[DEBUG] 2015-08-06 15:54:17,163(1466) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@b7ec5d  
[DEBUG] 2015-08-06 15:54:17,164(1467) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a001ff  
[DEBUG] 2015-08-06 15:54:17,164(1467) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a001ff  
[DEBUG] 2015-08-06 15:54:17,164(1467) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@1fe88d  
[DEBUG] 2015-08-06 15:54:17,164(1467) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@1fe88d  
[DEBUG] 2015-08-06 15:54:17,164(1467) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@178460d  
[DEBUG] 2015-08-06 15:54:17,164(1467) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@178460d  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@1deeb40  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1deeb40  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@17f242c  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@17f242c  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@17f242c  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@106fc94  
[DEBUG] 2015-08-06 15:54:17,165(1468) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@6f9b8e  
[DEBUG] 2015-08-06 15:54:17,166(1469) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f9b8e  
[DEBUG] 2015-08-06 15:54:17,166(1469) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f9b8e  
[DEBUG] 2015-08-06 15:54:17,166(1469) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@676437  
[DEBUG] 2015-08-06 15:54:17,166(1469) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@1d53f5b  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1d53f5b  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@b1074a  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@b1074a  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@25c828  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@25c828  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@68c26c  
[DEBUG] 2015-08-06 15:54:17,167(1470) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@68c26c  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@15575e0  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@15575e0  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@81b1fb  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@bac9b9  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1687e7c  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1687e7c  
[DEBUG] 2015-08-06 15:54:17,168(1471) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1687e7c  
[DEBUG] 2015-08-06 15:54:17,169(1472) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@701a27  
[DEBUG] 2015-08-06 15:54:17,169(1472) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@701a27  
[DEBUG] 2015-08-06 15:54:17,169(1472) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@701a27  
[DEBUG] 2015-08-06 15:54:17,169(1472) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@3cc262  
[DEBUG] 2015-08-06 15:54:17,169(1472) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@b122a1  
[DEBUG] 2015-08-06 15:54:17,170(1473) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@b122a1  
[DEBUG] 2015-08-06 15:54:17,170(1473) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@b122a1  
[DEBUG] 2015-08-06 15:54:17,170(1473) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@50ca0c  
[DEBUG] 2015-08-06 15:54:17,170(1473) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@50ca0c  
[DEBUG] 2015-08-06 15:54:17,170(1473) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@50ca0c  
[DEBUG] 2015-08-06 15:54:17,170(1473) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@1372656  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@b754b2  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@b754b2  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@1b0bdc8  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@19eda2c  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@100bac2  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@100bac2  
[DEBUG] 2015-08-06 15:54:17,171(1474) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@941db6  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@1fbfd6  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1be16f5  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@90832e  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@13e754f  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@13e754f  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@537d55  
[DEBUG] 2015-08-06 15:54:17,172(1475) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1249e1a  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@107e9a8  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@7d2796  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@b1fea4  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1c501f7  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1042c25  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@4e5056  
[DEBUG] 2015-08-06 15:54:17,173(1476) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@ba175f  
[INFO ] 2015-08-06 15:54:17,174(1477) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@941db6  
[DEBUG] 2015-08-06 15:54:17,174(1477) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@10ff62a  
[INFO ] 2015-08-06 15:54:17,174(1477) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@19eda2c  
[DEBUG] 2015-08-06 15:54:17,174(1477) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@ea7549  
[INFO ] 2015-08-06 15:54:17,174(1477) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@100bac2  
[DEBUG] 2015-08-06 15:54:17,174(1477) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@ea7549  
[INFO ] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@100bac2  
[DEBUG] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e0420b  
[INFO ] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@1b0bdc8  
[DEBUG] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@a30fd  
[INFO ] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@1be16f5  
[DEBUG] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@1836aea  
[INFO ] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@b754b2  
[DEBUG] 2015-08-06 15:54:17,175(1478) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1836aea  
[INFO ] 2015-08-06 15:54:17,176(1479) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@b754b2  
[DEBUG] 2015-08-06 15:54:17,176(1479) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@1549ceb  
[INFO ] 2015-08-06 15:54:17,176(1479) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@1fbfd6  
[DEBUG] 2015-08-06 15:54:17,176(1479) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 15:54:17,177(1480) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=1, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 15:54:17,177(1480) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[DEBUG] 2015-08-06 15:54:17,179(1482) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 15:54:17,179(1482) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 15:54:17,180(1483) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 15:54:17,180(1483) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 15:54:17,180(1483) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 15:54:17,180(1483) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 15:54:17,180(1483) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,181(1484) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,181(1484) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 15:54:17,181(1484) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 15:54:17,181(1484) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 15:54:17,182(1485) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 15:54:17,182(1485) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 15:54:17,182(1485) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 15:54:17,183(1486) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,183(1486) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,183(1486) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,184(1487) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,184(1487) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: 36100844-0866-4130-baf5-3d9994689612 (unnamed)  
[INFO ] 2015-08-06 15:54:17,184(1487) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 15:54:17,184(1487) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 15:54:17,184(1487) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 15:54:17,184(1487) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 15:54:17,185(1488) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 15:54:17,185(1488) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 15:54:17,186(1489) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 15:54:17,186(1489) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 15:54:17,187(1490) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 15:54:17,187(1490) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 15:54:17,188(1491) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 15:54:17,203(1506) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards2.anno_contact  
[INFO ] 2015-08-06 15:54:17,204(1507) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 15:54:17,204(1507) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 15:54:17,204(1507) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 15:54:17,204(1507) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 15:54:17,204(1507) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 15:54:17,205(1508) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 15:54:17,205(1508) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 15:54:17,255(1558) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 0 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 15:54:17,255(1558) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 0  
[DEBUG] 2015-08-06 15:54:17,302(1605) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476572  
[DEBUG] 2015-08-06 15:54:17,302(1605) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 15:54:17,309(1612) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 15:54:17,309(1612) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,309(1612) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 15:54:17,317(1620) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 1301283503232034838163348214841344, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 15:54:17,329(1632) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 15:54:17,329(1632) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 15:54:17,330(1633) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 15:54:17,331(1634) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 15:54:17,333(1636) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 15:54:17,334(1637) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 15:54:17,334(1637) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 15:54:17,335(1638) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=1301283503232034838163348214841344, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 15:54:17,354(1657) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,354(1657) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 15:54:17,371(1674) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 15:54:17,372(1675) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,429(1732) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 15:54:17,430(1733) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,430(1733) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,437(1740) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 0 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 15:54:17,438(1741) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 0  
[DEBUG] 2015-08-06 15:54:17,438(1741) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476574  
[DEBUG] 2015-08-06 15:54:17,439(1742) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 15:54:17,439(1742) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 15:54:17,439(1742) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,440(1743) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 15:54:17,440(1743) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 1301283503232034838163348223164417, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 15:54:17,441(1744) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 15:54:17,441(1744) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 15:54:17,441(1744) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 15:54:17,441(1744) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 15:54:17,442(1745) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 15:54:17,442(1745) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 15:54:17,442(1745) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 15:54:17,443(1746) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=1301283503232034838163348223164417, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 15:54:17,443(1746) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,444(1747) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 15:54:17,445(1748) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 15:54:17,446(1749) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,487(1790) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 15:54:17,487(1790) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,487(1790) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,488(1791) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 0 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 15:54:17,488(1791) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 0  
[DEBUG] 2015-08-06 15:54:17,488(1791) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476574  
[DEBUG] 2015-08-06 15:54:17,489(1792) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 15:54:17,489(1792) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 15:54:17,489(1792) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,489(1792) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 15:54:17,489(1792) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 1301283503232034838163348226375682, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 15:54:17,490(1793) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 15:54:17,490(1793) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 15:54:17,490(1793) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 15:54:17,490(1793) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 15:54:17,490(1793) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 15:54:17,490(1793) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 15:54:17,491(1794) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 15:54:17,491(1794) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=1301283503232034838163348226375682, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 15:54:17,491(1794) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,491(1794) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 15:54:17,492(1795) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 15:54:17,493(1796) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,529(1832) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 15:54:17,529(1832) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,529(1832) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 0 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 0  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476575  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 1301283503232034838163348229062659, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 15:54:17,530(1833) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=1301283503232034838163348229062659, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,531(1834) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 15:54:17,532(1835) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 15:54:17,532(1835) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,618(1921) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 15:54:17,618(1921) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,618(1921) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 0 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 0  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476576  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 1301283503232034838163348234895364, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 15:54:17,619(1922) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 15:54:17,620(1923) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 15:54:17,620(1923) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 15:54:17,620(1923) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 15:54:17,620(1923) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 15:54:17,620(1923) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=1301283503232034838163348234895364, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 15:54:17,621(1924) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,621(1924) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 15:54:17,621(1924) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 15:54:17,622(1925) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,707(2010) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 15:54:17,707(2010) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,707(2010) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,734(2037) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476577  
[DEBUG] 2015-08-06 15:54:17,799(2102) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 15:54:17,833(2136) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 15:54:17,833(2136) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 15:54:17,874(2177) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 15:54:17,892(2195) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 15:54:17,901(2204) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 15:54:17,901(2204) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 15:54:17,906(2209) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 15:54:17,910(2213) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 15:54:17,911(2214) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 15:54:17,911(2214) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 15:54:17,911(2214) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 15:54:17,927(2230) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 15:54:17,927(2230) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 15:54:17,927(2230) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 15:54:17,941(2244) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,941(2244) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,941(2244) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 15:54:17,943(2246) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,943(2246) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,943(2246) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,945(2248) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 15:54:17,947(2250) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,947(2250) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,947(2250) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388476579  
[DEBUG] 2015-08-06 15:54:17,948(2251) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 15:54:17,951(2254) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 15:54:17,951(2254) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 15:54:17,952(2255) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 15:54:17,953(2256) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 15:54:17,954(2257) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 15:54:17,954(2257) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 15:54:17,954(2257) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 15:54:17,954(2257) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 15:54:17,955(2258) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 15:54:17,955(2258) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 15:54:17,955(2258) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 15:54:17,956(2259) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 15:54:17,956(2259) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 15:54:17,956(2259) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 15:54:17,956(2259) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,956(2259) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,956(2259) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 15:54:17,957(2260) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,957(2260) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,958(2261) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,958(2261) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 15:54:17,958(2261) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,958(2261) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,962(2265) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#1]  
[DEBUG] 2015-08-06 15:54:17,962(2265) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,962(2265) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,962(2265) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,963(2266) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 15:54:17,964(2267) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#2]  
[DEBUG] 2015-08-06 15:54:17,965(2268) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,965(2268) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 15:54:17,965(2268) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 15:54:17,965(2268) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 15:54:17,966(2269) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,966(2269) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 15:54:17,966(2269) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 15:54:17,966(2269) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 15:54:17,966(2269) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 15:54:17,966(2269) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[INFO ] 2015-08-06 15:54:17,966(2269) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 15:54:17,966(2269) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards  
[INFO ] 2015-08-06 15:54:17,969(2272) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 15:54:17,970(2273) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards2  
[DEBUG] 2015-08-06 16:00:34,682(0) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:34,685(3) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:34,688(6) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:34,690(8) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1808199  
[DEBUG] 2015-08-06 16:00:34,692(10) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@120cc56  
[DEBUG] 2015-08-06 16:00:34,693(11) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@1ff7a1e  
[DEBUG] 2015-08-06 16:00:34,696(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:34,696(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:34,696(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:34,698(16) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:34,698(16) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:34,698(16) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:34,707(25) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:34,707(25) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:34,707(25) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:34,710(28) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:34,713(31) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:34,713(31) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:34,716(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:34,716(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:34,716(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:34,718(36) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:34,719(37) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:34,719(37) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:34,722(40) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:34,722(40) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:34,722(40) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:34,725(43) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:34,726(44) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:34,728(46) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:34,728(46) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:34,729(47) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:34,730(48) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:34,731(49) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:34,731(49) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:34,734(52) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:34,734(52) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:34,736(54) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:34,736(54) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:34,739(57) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:34,739(57) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:34,739(57) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:34,741(59) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14da8f4  
[DEBUG] 2015-08-06 16:00:34,743(61) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:34,744(62) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:34,744(62) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:34,746(64) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@115273a  
[DEBUG] 2015-08-06 16:00:34,747(65) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:34,748(66) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:34,750(68) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:34,750(68) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:34,751(69) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:34,752(70) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:34,753(71) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:34,753(71) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:34,755(73) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:34,755(73) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:34,756(74) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4fce71  
[DEBUG] 2015-08-06 16:00:34,757(75) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1db7df8  
[DEBUG] 2015-08-06 16:00:34,758(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:34,758(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:34,759(77) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:34,761(79) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:34,761(79) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:34,761(79) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:34,762(80) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@17ce4e7  
[DEBUG] 2015-08-06 16:00:34,763(81) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:34,763(81) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:34,764(82) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:34,765(83) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:34,765(83) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:34,765(83) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:34,766(84) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@1081d2e  
[DEBUG] 2015-08-06 16:00:34,775(93) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:34,775(93) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:34,776(94) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:34,777(95) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:34,782(100) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:34,783(101) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:34,784(102) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:34,785(103) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:34,785(103) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:34,788(106) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@aa37a6  
[DEBUG] 2015-08-06 16:00:34,792(110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:34,792(110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@bb7759  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1989f84  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@110c424  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1bd2664  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1238bd2  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@b0bad7  
[DEBUG] 2015-08-06 16:00:34,793(111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@ba9340  
[DEBUG] 2015-08-06 16:00:34,794(112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1198891  
[DEBUG] 2015-08-06 16:00:34,835(153) org.hibernate.annotations.common.util.impl.LoggerFactory.make(LoggerFactory.java:33) –> [main] Logging Provider: org.jboss.logging.Log4jLoggerProvider  
[INFO ] 2015-08-06 16:00:34,836(154) org.hibernate.annotations.common.reflection.java.JavaReflectionManager.<clinit>(JavaReflectionManager.java:66) –> [main] HCANN000001: Hibernate Commons Annotations {4.0.4.Final}  
[INFO ] 2015-08-06 16:00:34,843(161) org.hibernate.cfg.Environment.<clinit>(Environment.java:603) –> [main] Hibernate 3.6.6.Final  
[INFO ] 2015-08-06 16:00:34,845(163) org.hibernate.cfg.Environment.<clinit>(Environment.java:636) –> [main] hibernate.properties not found  
[INFO ] 2015-08-06 16:00:34,849(167) org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:814) –> [main] Bytecode provider name : javassist  
[INFO ] 2015-08-06 16:00:34,853(171) org.hibernate.cfg.Environment.<clinit>(Environment.java:695) –> [main] using JDK 1.4 java.sql.Timestamp handling  
[DEBUG] 2015-08-06 16:00:34,911(229) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:00:34,912(230) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:00:34,913(231) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:00:34,913(231) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:00:34,915(233) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:00:34,916(234) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:00:34,918(236) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:00:34,919(237) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:00:34,919(237) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:00:34,920(238) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:00:34,921(239) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:00:34,922(240) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:00:34,923(241) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:00:34,924(242) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:00:34,925(243) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:00:34,927(245) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard0.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:00:34,927(245) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard0.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:00:34,980(298) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:00:34,980(298) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:00:34,980(298) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:00:34,981(299) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:00:35,010(328) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:00:35,010(328) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:00:35,010(328) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:00:35,010(328) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:00:35,010(328) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.pool_size=10  
[DEBUG] 2015-08-06 16:00:35,010(328) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:00:35,011(329) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:00:35,011(329) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hbm2ddl.auto=update  
[DEBUG] 2015-08-06 16:00:35,011(329) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=0  
[DEBUG] 2015-08-06 16:00:35,011(329) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:00:35,011(329) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:00:35,011(329) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.show_sql=true, hibernate.connection.pool_size=10}  
[DEBUG] 2015-08-06 16:00:35,017(335) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1808199  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@120cc56  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@1ff7a1e  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,018(336) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,019(337) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,019(337) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,019(337) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,019(337) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,019(337) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,019(337) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,020(338) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,020(338) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,020(338) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,020(338) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,020(338) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,020(338) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,021(339) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,021(339) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,021(339) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,021(339) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,021(339) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,022(340) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,022(340) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:35,022(340) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:35,022(340) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:35,022(340) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:35,022(340) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:35,023(341) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:35,023(341) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:35,023(341) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:35,023(341) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:35,023(341) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:35,023(341) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:35,024(342) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:35,024(342) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,024(342) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,024(342) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,024(342) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14da8f4  
[DEBUG] 2015-08-06 16:00:35,025(343) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,025(343) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,025(343) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,025(343) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@115273a  
[DEBUG] 2015-08-06 16:00:35,025(343) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:35,026(344) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:35,026(344) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:35,026(344) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:35,026(344) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:35,026(344) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:35,027(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:35,027(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:35,027(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:35,027(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:35,027(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4fce71  
[DEBUG] 2015-08-06 16:00:35,027(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1db7df8  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,028(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@17ce4e7  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@1081d2e  
[DEBUG] 2015-08-06 16:00:35,029(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:35,030(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@aa37a6  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@16f25a7  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@110c31  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13785d3  
[DEBUG] 2015-08-06 16:00:35,031(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@32efa7  
[DEBUG] 2015-08-06 16:00:35,032(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@13f991  
[DEBUG] 2015-08-06 16:00:35,032(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@165a3c2  
[DEBUG] 2015-08-06 16:00:35,032(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e228bc  
[DEBUG] 2015-08-06 16:00:35,032(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@e06940  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:00:35,033(351) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:00:35,034(352) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:00:35,034(352) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:00:35,034(352) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:00:35,034(352) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:00:35,034(352) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:00:35,034(352) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:00:35,035(353) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:00:35,035(353) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:00:35,035(353) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard0.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:00:35,035(353) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard0.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:00:35,042(360) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:00:35,042(360) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:00:35,042(360) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:00:35,043(361) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:00:35,048(366) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:00:35,048(366) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:00:35,048(366) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:00:35,048(366) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:00:35,048(366) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.pool_size=10  
[DEBUG] 2015-08-06 16:00:35,049(367) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:00:35,049(367) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:00:35,049(367) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hbm2ddl.auto=update  
[DEBUG] 2015-08-06 16:00:35,049(367) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=0  
[DEBUG] 2015-08-06 16:00:35,049(367) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:00:35,049(367) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:00:35,050(368) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.show_sql=true, hibernate.connection.pool_size=10}  
[DEBUG] 2015-08-06 16:00:35,051(369) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,051(369) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,051(369) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,051(369) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1808199  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@120cc56  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@1ff7a1e  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,052(370) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,053(371) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,054(372) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,054(372) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,054(372) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,054(372) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,054(372) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,055(373) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,055(373) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,055(373) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:35,055(373) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:35,055(373) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:35,055(373) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:35,056(374) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:35,057(375) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:35,057(375) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,057(375) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,057(375) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,057(375) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14da8f4  
[DEBUG] 2015-08-06 16:00:35,057(375) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,058(376) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,058(376) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,058(376) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@115273a  
[DEBUG] 2015-08-06 16:00:35,058(376) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:35,058(376) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:35,058(376) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:35,059(377) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:35,059(377) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:35,059(377) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:35,059(377) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:35,059(377) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:35,059(377) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4fce71  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1db7df8  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,060(378) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@17ce4e7  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,061(379) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,062(380) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,062(380) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,062(380) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@1081d2e  
[DEBUG] 2015-08-06 16:00:35,062(380) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,062(380) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,062(380) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:35,063(381) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@aa37a6  
[DEBUG] 2015-08-06 16:00:35,064(382) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:35,064(382) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:35,064(382) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@195d4fe  
[DEBUG] 2015-08-06 16:00:35,064(382) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1d2b01b  
[DEBUG] 2015-08-06 16:00:35,064(382) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@127fa12  
[DEBUG] 2015-08-06 16:00:35,064(382) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@192c8d9  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1c05ffd  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@de1b8a  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e232b5  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@16f144c  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:00:35,065(383) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:00:35,066(384) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:00:35,067(385) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:00:35,067(385) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:00:35,067(385) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard1.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:00:35,067(385) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard1.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:00:35,069(387) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:00:35,069(387) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:00:35,069(387) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:00:35,070(388) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:00:35,074(392) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:00:35,074(392) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards2  
[DEBUG] 2015-08-06 16:00:35,074(392) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:00:35,074(392) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:00:35,075(393) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:00:35,075(393) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:00:35,075(393) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:00:35,075(393) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=1  
[DEBUG] 2015-08-06 16:00:35,075(393) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:00:35,075(393) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:00:35,076(394) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {hibernate.connection.password=root, java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, java.vm.version=20.2-b06, hibernate.connection.username=root, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) Client VM, file.encoding.pkg=sun.io, user.country=CN, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=Service Pack 1, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, java.runtime.version=1.6.0_27-b07, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hibernate.connection.shard_id=1, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, os.arch=x86, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, hibernate.shard.enable_cross_shard_relationship_checks=false, sun.jnu.encoding=GBK, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.specification.name=Java Platform API Specification, java.class.version=50.0, sun.management.compiler=HotSpot Client Compiler, os.version=6.1, connection.password=root, user.home=C:\Users\Administrator, user.timezone=Asia/Shanghai, connection.username=root, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.driver_class=com.mysql.jdbc.Driver, show_sql=true, user.name=Administrator, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.0, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.home=D:\__JAVA__\jre6.0, sun.arch.data.model=32, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, user.language=zh, java.specification.vendor=Sun Microsystems Inc., awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_27, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, java.vendor=Sun Microsystems Inc., connection.driver_class=com.mysql.jdbc.Driver, file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, connection.url=jdbc:mysql://localhost/hbshards2, dialect=org.hibernate.dialect.MySQLDialect, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86}  
[DEBUG] 2015-08-06 16:00:35,097(415) org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854) –> [main] Preparing to build session factory with filters : {}  
[DEBUG] 2015-08-06 16:00:35,144(462) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:00:35,144(462) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[INFO ] 2015-08-06 16:00:35,149(467) org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:532) –> [main] Binding entity from annotated class: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:00:35,182(500) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}  
[DEBUG] 2015-08-06 16:00:35,185(503) org.hibernate.cfg.AnnotationBinder.determineSharedCacheMode(AnnotationBinder.java:1019) –> [main] no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED  
[DEBUG] 2015-08-06 16:00:35,193(511) org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) –> [main] Import with entity name ContactEntity  
[INFO ] 2015-08-06 16:00:35,196(514) org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:530) –> [main] Bind entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity on table anno_contact  
[DEBUG] 2015-08-06 16:00:35,236(554) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=ID, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:00:35,242(560) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property id with lazy=false  
[DEBUG] 2015-08-06 16:00:35,246(564) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for id  
[DEBUG] 2015-08-06 16:00:35,248(566) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property id  
[DEBUG] 2015-08-06 16:00:35,253(571) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=EMAIL, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:00:35,254(572) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property email with lazy=false  
[DEBUG] 2015-08-06 16:00:35,254(572) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for email  
[DEBUG] 2015-08-06 16:00:35,254(572) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property email  
[DEBUG] 2015-08-06 16:00:35,254(572) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=LOGINid, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:00:35,255(573) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property loginId with lazy=false  
[DEBUG] 2015-08-06 16:00:35,255(573) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for loginId  
[DEBUG] 2015-08-06 16:00:35,255(573) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property loginId  
[DEBUG] 2015-08-06 16:00:35,255(573) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=NAME, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:00:35,256(574) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property name with lazy=false  
[DEBUG] 2015-08-06 16:00:35,256(574) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for name  
[DEBUG] 2015-08-06 16:00:35,256(574) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property name  
[DEBUG] 2015-08-06 16:00:35,256(574) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=PASSWORD, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:00:35,257(575) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property password with lazy=false  
[DEBUG] 2015-08-06 16:00:35,257(575) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for password  
[DEBUG] 2015-08-06 16:00:35,257(575) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property password  
[DEBUG] 2015-08-06 16:00:35,260(578) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for id  
[DEBUG] 2015-08-06 16:00:35,260(578) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for email  
[DEBUG] 2015-08-06 16:00:35,260(578) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for loginId  
[DEBUG] 2015-08-06 16:00:35,261(579) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for name  
[DEBUG] 2015-08-06 16:00:35,261(579) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for password  
[DEBUG] 2015-08-06 16:00:35,262(580) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:00:35,263(581) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:35,263(581) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:35,263(581) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:00:35,264(582) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:00:35,264(582) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:00:35,264(582) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[INFO ] 2015-08-06 16:00:35,268(586) org.hibernate.cfg.Configuration.applyHibernateValidatorLegacyConstraintsOnDDL(Configuration.java:1676) –> [main] Hibernate Validator not found: ignoring  
[INFO ] 2015-08-06 16:00:35,295(613) org.hibernate.validator.internal.util.Version.<clinit>(Version.java:27) –> [main] HV000001: Hibernate Validator 4.3.1.Final  
[DEBUG] 2015-08-06 16:00:35,307(625) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:00:35,309(627) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:00:35,312(630) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:00:35,316(634) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:00:35,385(703) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 16:00:35,386(704) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:00:35,386(704) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:00:35,386(704) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:00:35,387(705) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:00:35,391(709) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 16:00:35,391(709) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 16:00:35,399(717) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 16:00:35,399(717) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 16:00:35,399(717) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 16:00:35,409(727) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards  
[INFO ] 2015-08-06 16:00:35,409(727) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=0}  
[DEBUG] 2015-08-06 16:00:35,409(727) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 16:00:35,668(986) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards, Isolation Level: 4  
[INFO ] 2015-08-06 16:00:35,689(1007) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 16:00:35,700(1018) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 16:00:35,700(1018) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 16:00:35,702(1020) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 16:00:35,704(1022) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 16:00:35,704(1022) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 16:00:35,704(1022) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 16:00:35,704(1022) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 16:00:35,704(1022) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 16:00:35,705(1023) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 16:00:35,705(1023) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 16:00:35,705(1023) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 16:00:35,705(1023) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 16:00:35,711(1029) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 16:00:35,711(1029) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 16:00:35,711(1029) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 16:00:35,711(1029) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 16:00:35,711(1029) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 16:00:35,711(1029) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:00:35,713(1031) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:00:35,713(1031) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 16:00:35,713(1031) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 16:00:35,713(1031) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 16:00:35,713(1031) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 16:00:35,714(1032) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 16:00:35,715(1033) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 16:00:35,715(1033) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 16:00:35,725(1043) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 16:00:35,726(1044) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 16:00:35,727(1045) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 16:00:35,727(1045) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 16:00:35,727(1045) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 16:00:35,727(1045) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 16:00:35,748(1066) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 16:00:35,755(1073) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[DEBUG] 2015-08-06 16:00:35,757(1075) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,757(1075) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,757(1075) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1808199  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@120cc56  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@1ff7a1e  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:35,758(1076) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,759(1077) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,759(1077) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:35,759(1077) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,759(1077) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,759(1077) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:35,759(1077) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,760(1078) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,761(1079) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:35,761(1079) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,761(1079) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,761(1079) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:35,761(1079) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:35,761(1079) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:35,762(1080) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:35,763(1081) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:35,763(1081) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:35,763(1081) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,763(1081) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,763(1081) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:35,763(1081) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14da8f4  
[DEBUG] 2015-08-06 16:00:35,764(1082) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,764(1082) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,764(1082) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:35,764(1082) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@115273a  
[DEBUG] 2015-08-06 16:00:35,764(1082) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:35,764(1082) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:35,765(1083) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:35,766(1084) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:35,766(1084) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4fce71  
[DEBUG] 2015-08-06 16:00:35,766(1084) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1db7df8  
[DEBUG] 2015-08-06 16:00:35,766(1084) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,766(1084) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,766(1084) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@17ce4e7  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,767(1085) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@1081d2e  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,768(1086) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:35,769(1087) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:35,769(1087) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,769(1087) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,769(1087) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:35,769(1087) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:35,769(1087) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:35,770(1088) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@aa37a6  
[DEBUG] 2015-08-06 16:00:35,770(1088) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:35,770(1088) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:35,770(1088) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1cc0a7f  
[DEBUG] 2015-08-06 16:00:35,770(1088) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@c52200  
[DEBUG] 2015-08-06 16:00:35,770(1088) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@3b4b1e  
[DEBUG] 2015-08-06 16:00:35,771(1089) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@c0a9f9  
[DEBUG] 2015-08-06 16:00:35,771(1089) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@d72200  
[DEBUG] 2015-08-06 16:00:35,771(1089) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1f9338f  
[DEBUG] 2015-08-06 16:00:35,771(1089) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1a80aea  
[DEBUG] 2015-08-06 16:00:35,771(1089) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@164b9b6  
[DEBUG] 2015-08-06 16:00:35,771(1089) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@16477d9  
[INFO ] 2015-08-06 16:00:35,772(1090) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:35,772(1090) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:00:35,772(1090) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,772(1090) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:00:35,772(1090) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:35,772(1090) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@f864fe  
[INFO ] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1cda59b  
[INFO ] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:00:35,773(1091) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:35,774(1092) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@d9896e  
[INFO ] 2015-08-06 16:00:35,774(1092) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:35,774(1092) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@2c17f7  
[INFO ] 2015-08-06 16:00:35,774(1092) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:35,777(1095) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 16:00:35,777(1095) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 16:00:35,793(1111) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[WARN ] 2015-08-06 16:00:35,799(1117) org.hibernate.id.UUIDHexGenerator.<init>(UUIDHexGenerator.java:58) –> [main] Using org.hibernate.shards.id.ShardedUUIDGenerator which does not generate IETF RFC 4122 compliant UUID values; consider using org.hibernate.id.UUIDGenerator instead  
[DEBUG] 2015-08-06 16:00:35,949(1267) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:00:35,949(1267) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 16:00:35,949(1267) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 16:00:35,949(1267) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:00:35,950(1268) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 16:00:35,950(1268) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 16:00:35,974(1292) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:35,974(1292) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:35,975(1293) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:35,975(1293) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:35,975(1293) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:35,975(1293) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 16:00:35,976(1294) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:35,976(1294) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:35,976(1294) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:35,976(1294) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:35,983(1301) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:35,983(1301) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,005(1323) org.hibernate.impl.SessionFactoryObjectFactory.<clinit>(SessionFactoryObjectFactory.java:61) –> [main] initializing class SessionFactoryObjectFactory  
[DEBUG] 2015-08-06 16:00:36,006(1324) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: 6eaf061a-7157-498b-936b-004e29c3be87 (unnamed)  
[INFO ] 2015-08-06 16:00:36,007(1325) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 16:00:36,007(1325) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 16:00:36,012(1330) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 16:00:36,012(1330) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 16:00:36,014(1332) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 16:00:36,014(1332) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:00:36,014(1332) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:00:36,014(1332) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:00:36,014(1332) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:36,014(1332) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:36,015(1333) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:00:36,015(1333) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:00:36,015(1333) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:00:36,015(1333) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:00:36,016(1334) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:00:36,016(1334) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:00:36,016(1334) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:00:36,017(1335) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 16:00:36,045(1363) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards.anno_contact  
[INFO ] 2015-08-06 16:00:36,045(1363) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 16:00:36,045(1363) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 16:00:36,045(1363) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 16:00:36,045(1363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 16:00:36,046(1364) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 16:00:36,048(1366) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 16:00:36,048(1366) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 16:00:36,049(1367) org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854) –> [main] Preparing to build session factory with filters : {}  
[DEBUG] 2015-08-06 16:00:36,049(1367) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:00:36,049(1367) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:00:36,049(1367) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:00:36,049(1367) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:36,050(1368) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:36,050(1368) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:00:36,050(1368) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:00:36,050(1368) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:00:36,050(1368) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:00:36,051(1369) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:00:36,051(1369) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:00:36,051(1369) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:00:36,052(1370) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:00:36,058(1376) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 16:00:36,058(1376) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:00:36,058(1376) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:00:36,059(1377) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:00:36,062(1380) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:00:36,065(1383) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 16:00:36,065(1383) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 16:00:36,065(1383) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 16:00:36,065(1383) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 16:00:36,065(1383) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 16:00:36,065(1383) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 16:00:36,066(1384) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=1}  
[DEBUG] 2015-08-06 16:00:36,066(1384) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 16:00:36,084(1402) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards2, Isolation Level: 4  
[INFO ] 2015-08-06 16:00:36,084(1402) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 16:00:36,085(1403) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 16:00:36,086(1404) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 16:00:36,087(1405) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 16:00:36,088(1406) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 16:00:36,092(1410) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 16:00:36,092(1410) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[WARN ] 2015-08-06 16:00:36,092(1410) org.hibernate.type.TypeFactory$TypeScopeImpl.injectSessionFactory(TypeFactory.java:69) –> [main] Scoping types to session factory org.hibernate.impl.SessionFactoryImpl@d61aef after already scoped org.hibernate.impl.SessionFactoryImpl@7a36a2  
[DEBUG] 2015-08-06 16:00:36,092(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:36,092(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fec107  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1808199  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@120cc56  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@1ff7a1e  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@186768e  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:36,093(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1630ab9  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c4aad3  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1bfc93a  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@1a9334  
[DEBUG] 2015-08-06 16:00:36,094(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@15212bc  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a352a5  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1fc2fb  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1b4fad5  
[DEBUG] 2015-08-06 16:00:36,095(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@c68c3  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@406199  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@80fa6f  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1292d26  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:36,096(1414) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:36,097(1415) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@10f11b8  
[DEBUG] 2015-08-06 16:00:36,097(1415) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14da8f4  
[DEBUG] 2015-08-06 16:00:36,097(1415) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:36,097(1415) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:36,097(1415) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1d85f79  
[DEBUG] 2015-08-06 16:00:36,097(1415) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@115273a  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@11a64ed  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@bd928a  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1bcc0bc  
[DEBUG] 2015-08-06 16:00:36,098(1416) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d263f  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1d6776d  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4fce71  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1db7df8  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:36,099(1417) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:36,100(1418) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@21b220  
[DEBUG] 2015-08-06 16:00:36,100(1418) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:36,100(1418) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:36,100(1418) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@10a2d64  
[DEBUG] 2015-08-06 16:00:36,100(1418) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@17ce4e7  
[DEBUG] 2015-08-06 16:00:36,100(1418) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@62937c  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a17083  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@1081d2e  
[DEBUG] 2015-08-06 16:00:36,101(1419) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:36,102(1420) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@aa37a6  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1cbfe9d  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1dfd90f  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1238785  
[DEBUG] 2015-08-06 16:00:36,103(1421) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@19646fd  
[DEBUG] 2015-08-06 16:00:36,104(1422) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@e2433b  
[DEBUG] 2015-08-06 16:00:36,104(1422) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@abe654  
[DEBUG] 2015-08-06 16:00:36,104(1422) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@19ea173  
[DEBUG] 2015-08-06 16:00:36,104(1422) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@179a49f  
[DEBUG] 2015-08-06 16:00:36,104(1422) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1b48392  
[DEBUG] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@16477d9  
[INFO ] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@fd68b1  
[DEBUG] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@134f69a  
[DEBUG] 2015-08-06 16:00:36,105(1423) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@f864fe  
[INFO ] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@15e9756  
[DEBUG] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1cda59b  
[INFO ] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@d1fa5  
[DEBUG] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:00:36,106(1424) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@9f671b  
[DEBUG] 2015-08-06 16:00:36,107(1425) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@d9896e  
[INFO ] 2015-08-06 16:00:36,107(1425) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@4b035d  
[DEBUG] 2015-08-06 16:00:36,107(1425) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@2c17f7  
[INFO ] 2015-08-06 16:00:36,107(1425) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@a6d51e  
[DEBUG] 2015-08-06 16:00:36,108(1426) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 16:00:36,108(1426) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=1, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 16:00:36,108(1426) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[DEBUG] 2015-08-06 16:00:36,110(1428) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:00:36,110(1428) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 16:00:36,110(1428) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 16:00:36,110(1428) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:00:36,110(1428) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 16:00:36,110(1428) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 16:00:36,111(1429) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,111(1429) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,111(1429) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:36,111(1429) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:36,112(1430) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:36,112(1430) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 16:00:36,112(1430) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:36,112(1430) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:00:36,112(1430) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,113(1431) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,113(1431) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,113(1431) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,113(1431) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: 6c75f975-51a3-44c5-bd1d-a66fce13b7cd (unnamed)  
[INFO ] 2015-08-06 16:00:36,113(1431) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 16:00:36,113(1431) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 16:00:36,113(1431) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 16:00:36,114(1432) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 16:00:36,114(1432) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 16:00:36,114(1432) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:00:36,114(1432) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:00:36,114(1432) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:00:36,115(1433) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:36,115(1433) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:00:36,115(1433) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:00:36,115(1433) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:00:36,115(1433) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:00:36,115(1433) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:00:36,116(1434) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:00:36,116(1434) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:00:36,116(1434) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:00:36,116(1434) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 16:00:36,130(1448) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards2.anno_contact  
[INFO ] 2015-08-06 16:00:36,130(1448) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 16:00:36,130(1448) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 16:00:36,130(1448) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 16:00:36,131(1449) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 16:00:36,131(1449) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 16:00:36,132(1450) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 16:00:36,132(1450) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 16:00:36,214(1532) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388480361  
[DEBUG] 2015-08-06 16:00:36,258(1576) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:00:36,266(1584) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 16:00:36,267(1585) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:00:36,298(1616) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 16:00:36,314(1632) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 16:00:36,320(1638) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 16:00:36,320(1638) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 16:00:36,326(1644) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 16:00:36,330(1648) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 16:00:36,330(1648) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 16:00:36,332(1650) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 16:00:36,332(1650) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:00:36,348(1666) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:00:36,349(1667) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:00:36,349(1667) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:00:36,361(1679) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,362(1680) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:00:36,362(1680) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:00:36,378(1696) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,379(1697) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,379(1697) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,380(1698) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:00:36,385(1703) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:00:36,385(1703) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:00:36,385(1703) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388480363  
[DEBUG] 2015-08-06 16:00:36,386(1704) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:00:36,389(1707) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 16:00:36,389(1707) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:00:36,390(1708) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 16:00:36,391(1709) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 16:00:36,392(1710) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 16:00:36,392(1710) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 16:00:36,393(1711) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 16:00:36,393(1711) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 16:00:36,393(1711) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 16:00:36,393(1711) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 16:00:36,394(1712) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:00:36,394(1712) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:00:36,394(1712) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:00:36,394(1712) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:00:36,394(1712) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,395(1713) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:00:36,395(1713) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:00:36,395(1713) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,396(1714) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,396(1714) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,396(1714) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:00:36,396(1714) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:00:36,396(1714) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:00:36,401(1719) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#1]  
[DEBUG] 2015-08-06 16:00:36,401(1719) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,401(1719) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:00:36,401(1719) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,403(1721) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,403(1721) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,403(1721) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,403(1721) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:00:36,403(1721) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 16:00:36,404(1722) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:00:36,404(1722) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:00:36,404(1722) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#2]  
[DEBUG] 2015-08-06 16:00:36,404(1722) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,404(1722) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:00:36,404(1722) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:00:36,405(1723) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:00:36,405(1723) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,405(1723) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:00:36,405(1723) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:00:36,406(1724) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 16:00:36,406(1724) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:00:36,406(1724) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[INFO ] 2015-08-06 16:00:36,407(1725) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 16:00:36,408(1726) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 16:00:36,410(1728) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 16:00:36,410(1728) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:01:40,519(1) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,522(4) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,525(7) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,526(8) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:01:40,528(10) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:01:40,529(11) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:01:40,532(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,532(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,532(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,534(16) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,534(16) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,534(16) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,541(23) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,541(23) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,541(23) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,543(25) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,545(27) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,546(28) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,548(30) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,548(30) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,548(30) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,551(33) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,552(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,552(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,554(36) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,554(36) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,554(36) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,557(39) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:40,557(39) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:40,559(41) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:40,559(41) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:40,561(43) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:40,561(43) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:40,563(45) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:40,563(45) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:40,566(48) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:40,566(48) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:40,568(50) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:40,568(50) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:40,571(53) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,571(53) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,571(53) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,573(55) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:01:40,574(56) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,575(57) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,575(57) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,576(58) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:01:40,578(60) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:40,578(60) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:40,580(62) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:40,580(62) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:40,582(64) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:40,582(64) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:40,583(65) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:40,583(65) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:40,586(68) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:40,586(68) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:40,587(69) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:01:40,588(70) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:01:40,589(71) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,589(71) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,590(72) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,591(73) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,591(73) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,591(73) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,592(74) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:01:40,594(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,594(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,594(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,596(78) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,596(78) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,596(78) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,598(80) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:01:40,606(88) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:40,606(88) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:40,607(89) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:40,607(89) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:40,613(95) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:40,613(95) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:40,614(96) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:40,615(97) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:40,616(98) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:40,617(99) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:01:40,621(103) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:40,621(103) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:40,622(104) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1b8f864  
[DEBUG] 2015-08-06 16:01:40,622(104) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@bb7759  
[DEBUG] 2015-08-06 16:01:40,622(104) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@1989f84  
[DEBUG] 2015-08-06 16:01:40,622(104) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@110c424  
[DEBUG] 2015-08-06 16:01:40,623(105) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1bd2664  
[DEBUG] 2015-08-06 16:01:40,623(105) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1238bd2  
[DEBUG] 2015-08-06 16:01:40,623(105) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@b0bad7  
[DEBUG] 2015-08-06 16:01:40,623(105) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@ba9340  
[DEBUG] 2015-08-06 16:01:40,663(145) org.hibernate.annotations.common.util.impl.LoggerFactory.make(LoggerFactory.java:33) –> [main] Logging Provider: org.jboss.logging.Log4jLoggerProvider  
[INFO ] 2015-08-06 16:01:40,664(146) org.hibernate.annotations.common.reflection.java.JavaReflectionManager.<clinit>(JavaReflectionManager.java:66) –> [main] HCANN000001: Hibernate Commons Annotations {4.0.4.Final}  
[INFO ] 2015-08-06 16:01:40,670(152) org.hibernate.cfg.Environment.<clinit>(Environment.java:603) –> [main] Hibernate 3.6.6.Final  
[INFO ] 2015-08-06 16:01:40,672(154) org.hibernate.cfg.Environment.<clinit>(Environment.java:636) –> [main] hibernate.properties not found  
[INFO ] 2015-08-06 16:01:40,675(157) org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:814) –> [main] Bytecode provider name : javassist  
[INFO ] 2015-08-06 16:01:40,678(160) org.hibernate.cfg.Environment.<clinit>(Environment.java:695) –> [main] using JDK 1.4 java.sql.Timestamp handling  
[DEBUG] 2015-08-06 16:01:40,735(217) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:01:40,736(218) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:01:40,737(219) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:01:40,738(220) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:01:40,743(225) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:01:40,743(225) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:01:40,745(227) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:01:40,746(228) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:01:40,747(229) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:01:40,748(230) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:01:40,749(231) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:01:40,749(231) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:01:40,750(232) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:01:40,751(233) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:01:40,751(233) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:01:40,753(235) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard0.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:01:40,753(235) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard0.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:01:40,804(286) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:01:40,804(286) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:01:40,804(286) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:01:40,805(287) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:01:40,830(312) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.pool_size=10  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:01:40,831(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hbm2ddl.auto=update  
[DEBUG] 2015-08-06 16:01:40,832(314) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=0  
[DEBUG] 2015-08-06 16:01:40,832(314) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:01:40,832(314) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:01:40,832(314) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.show_sql=true, hibernate.connection.pool_size=10}  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:01:40,837(319) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,838(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,839(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:40,840(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:40,841(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:40,841(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:40,842(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:40,842(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:40,842(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:40,842(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:40,842(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:40,842(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,843(325) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,843(325) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,843(325) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:01:40,843(325) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,844(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,844(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,844(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:01:40,844(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:40,844(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:40,845(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:40,845(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:40,845(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:40,845(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:40,845(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:40,847(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:40,847(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:40,847(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,848(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:01:40,849(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:40,850(332) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:40,850(332) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:40,850(332) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:40,850(332) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:40,850(332) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:40,850(332) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:40,851(333) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:40,851(333) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:40,851(333) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:01:40,851(333) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:40,851(333) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:40,851(333) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@16f25a7  
[DEBUG] 2015-08-06 16:01:40,852(334) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@110c31  
[DEBUG] 2015-08-06 16:01:40,852(334) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13785d3  
[DEBUG] 2015-08-06 16:01:40,852(334) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@32efa7  
[DEBUG] 2015-08-06 16:01:40,852(334) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@13f991  
[DEBUG] 2015-08-06 16:01:40,852(334) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@165a3c2  
[DEBUG] 2015-08-06 16:01:40,852(334) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e228bc  
[DEBUG] 2015-08-06 16:01:40,853(335) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@e06940  
[DEBUG] 2015-08-06 16:01:40,853(335) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:01:40,853(335) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:01:40,853(335) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:01:40,853(335) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:01:40,854(336) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:01:40,855(337) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:01:40,855(337) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:01:40,855(337) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:01:40,855(337) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:01:40,855(337) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard0.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:01:40,855(337) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard0.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:01:40,861(343) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:01:40,861(343) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:01:40,862(344) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:01:40,862(344) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.pool_size=10  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:01:40,866(348) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hbm2ddl.auto=update  
[DEBUG] 2015-08-06 16:01:40,867(349) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=0  
[DEBUG] 2015-08-06 16:01:40,867(349) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:01:40,867(349) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:01:40,867(349) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.show_sql=true, hibernate.connection.pool_size=10}  
[DEBUG] 2015-08-06 16:01:40,868(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,868(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,868(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:40,868(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:01:40,868(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:01:40,868(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:40,869(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,870(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:40,871(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:40,872(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:40,872(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:40,872(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:40,872(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:40,872(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:40,872(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,873(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:40,874(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,875(357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:40,876(358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:40,877(359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:40,878(360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:40,878(360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:40,878(360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:01:40,878(360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:40,878(360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:40,879(361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@195d4fe  
[DEBUG] 2015-08-06 16:01:40,879(361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1d2b01b  
[DEBUG] 2015-08-06 16:01:40,879(361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@127fa12  
[DEBUG] 2015-08-06 16:01:40,879(361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@192c8d9  
[DEBUG] 2015-08-06 16:01:40,879(361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1c05ffd  
[DEBUG] 2015-08-06 16:01:40,879(361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@de1b8a  
[DEBUG] 2015-08-06 16:01:40,880(362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e232b5  
[DEBUG] 2015-08-06 16:01:40,880(362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@16f144c  
[DEBUG] 2015-08-06 16:01:40,880(362) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:01:40,880(362) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:01:40,880(362) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:01:40,880(362) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:01:40,881(363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:01:40,881(363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:01:40,881(363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:01:40,881(363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:01:40,881(363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:01:40,881(363) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:01:40,882(364) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:01:40,882(364) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:01:40,882(364) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:01:40,882(364) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:01:40,882(364) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:01:40,882(364) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard1.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:01:40,882(364) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard1.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:01:40,885(367) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:01:40,885(367) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:01:40,885(367) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:01:40,886(368) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:01:40,889(371) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:01:40,889(371) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards2  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=1  
[DEBUG] 2015-08-06 16:01:40,890(372) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:01:40,891(373) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:01:40,891(373) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {hibernate.connection.password=root, java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, java.vm.version=20.2-b06, hibernate.connection.username=root, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) Client VM, file.encoding.pkg=sun.io, user.country=CN, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=Service Pack 1, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, java.runtime.version=1.6.0_27-b07, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hibernate.connection.shard_id=1, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, os.arch=x86, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, hibernate.shard.enable_cross_shard_relationship_checks=false, sun.jnu.encoding=GBK, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.specification.name=Java Platform API Specification, java.class.version=50.0, sun.management.compiler=HotSpot Client Compiler, os.version=6.1, connection.password=root, user.home=C:\Users\Administrator, user.timezone=Asia/Shanghai, connection.username=root, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.driver_class=com.mysql.jdbc.Driver, show_sql=true, user.name=Administrator, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.0, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.home=D:\__JAVA__\jre6.0, sun.arch.data.model=32, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, user.language=zh, java.specification.vendor=Sun Microsystems Inc., awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_27, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, java.vendor=Sun Microsystems Inc., connection.driver_class=com.mysql.jdbc.Driver, file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, connection.url=jdbc:mysql://localhost/hbshards2, dialect=org.hibernate.dialect.MySQLDialect, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86}  
[DEBUG] 2015-08-06 16:01:40,913(395) org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854) –> [main] Preparing to build session factory with filters : {}  
[DEBUG] 2015-08-06 16:01:40,960(442) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:01:40,960(442) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[INFO ] 2015-08-06 16:01:40,966(448) org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:532) –> [main] Binding entity from annotated class: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:01:41,001(483) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}  
[DEBUG] 2015-08-06 16:01:41,004(486) org.hibernate.cfg.AnnotationBinder.determineSharedCacheMode(AnnotationBinder.java:1019) –> [main] no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED  
[DEBUG] 2015-08-06 16:01:41,011(493) org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) –> [main] Import with entity name ContactEntity  
[INFO ] 2015-08-06 16:01:41,016(498) org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:530) –> [main] Bind entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity on table anno_contact  
[DEBUG] 2015-08-06 16:01:41,050(532) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=ID, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:01:41,054(536) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property id with lazy=false  
[DEBUG] 2015-08-06 16:01:41,057(539) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for id  
[DEBUG] 2015-08-06 16:01:41,060(542) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property id  
[DEBUG] 2015-08-06 16:01:41,065(547) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=EMAIL, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:01:41,066(548) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property email with lazy=false  
[DEBUG] 2015-08-06 16:01:41,066(548) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for email  
[DEBUG] 2015-08-06 16:01:41,066(548) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property email  
[DEBUG] 2015-08-06 16:01:41,066(548) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=LOGINid, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:01:41,067(549) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property loginId with lazy=false  
[DEBUG] 2015-08-06 16:01:41,067(549) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for loginId  
[DEBUG] 2015-08-06 16:01:41,067(549) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property loginId  
[DEBUG] 2015-08-06 16:01:41,067(549) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=NAME, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:01:41,068(550) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property name with lazy=false  
[DEBUG] 2015-08-06 16:01:41,068(550) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for name  
[DEBUG] 2015-08-06 16:01:41,068(550) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property name  
[DEBUG] 2015-08-06 16:01:41,068(550) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=PASSWORD, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:01:41,069(551) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property password with lazy=false  
[DEBUG] 2015-08-06 16:01:41,069(551) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for password  
[DEBUG] 2015-08-06 16:01:41,069(551) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property password  
[DEBUG] 2015-08-06 16:01:41,072(554) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for id  
[DEBUG] 2015-08-06 16:01:41,072(554) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for email  
[DEBUG] 2015-08-06 16:01:41,072(554) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for loginId  
[DEBUG] 2015-08-06 16:01:41,072(554) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for name  
[DEBUG] 2015-08-06 16:01:41,072(554) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for password  
[DEBUG] 2015-08-06 16:01:41,073(555) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:01:41,074(556) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,075(557) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,075(557) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:01:41,075(557) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:01:41,075(557) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:01:41,075(557) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[INFO ] 2015-08-06 16:01:41,080(562) org.hibernate.cfg.Configuration.applyHibernateValidatorLegacyConstraintsOnDDL(Configuration.java:1676) –> [main] Hibernate Validator not found: ignoring  
[INFO ] 2015-08-06 16:01:41,104(586) org.hibernate.validator.internal.util.Version.<clinit>(Version.java:27) –> [main] HV000001: Hibernate Validator 4.3.1.Final  
[DEBUG] 2015-08-06 16:01:41,114(596) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:01:41,116(598) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:01:41,119(601) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:01:41,125(607) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:01:41,198(680) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 16:01:41,198(680) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:01:41,198(680) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:01:41,199(681) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:01:41,199(681) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:01:41,204(686) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 16:01:41,204(686) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 16:01:41,211(693) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 16:01:41,211(693) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 16:01:41,212(694) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 16:01:41,218(700) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards  
[INFO ] 2015-08-06 16:01:41,218(700) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=0}  
[DEBUG] 2015-08-06 16:01:41,219(701) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 16:01:41,482(964) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards, Isolation Level: 4  
[INFO ] 2015-08-06 16:01:41,502(984) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 16:01:41,514(996) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 16:01:41,515(997) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 16:01:41,516(998) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 16:01:41,517(999) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 16:01:41,517(999) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 16:01:41,518(1000) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 16:01:41,518(1000) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 16:01:41,518(1000) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 16:01:41,518(1000) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 16:01:41,518(1000) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 16:01:41,519(1001) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 16:01:41,519(1001) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 16:01:41,525(1007) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 16:01:41,525(1007) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 16:01:41,525(1007) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 16:01:41,525(1007) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 16:01:41,525(1007) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 16:01:41,525(1007) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:01:41,527(1009) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:01:41,527(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 16:01:41,527(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 16:01:41,528(1010) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 16:01:41,528(1010) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 16:01:41,528(1010) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 16:01:41,529(1011) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 16:01:41,529(1011) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 16:01:41,534(1016) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 16:01:41,535(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 16:01:41,535(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 16:01:41,535(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 16:01:41,536(1018) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 16:01:41,536(1018) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 16:01:41,553(1035) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 16:01:41,557(1039) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[DEBUG] 2015-08-06 16:01:41,558(1040) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:41,559(1041) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:41,559(1041) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:41,559(1041) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:01:41,559(1041) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:01:41,559(1041) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:41,560(1042) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:41,561(1043) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:41,562(1044) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:41,563(1045) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:41,564(1046) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:01:41,565(1047) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:41,566(1048) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,567(1049) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@a29c6e  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1cc0a7f  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@c52200  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@3b4b1e  
[DEBUG] 2015-08-06 16:01:41,568(1050) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@c0a9f9  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@d72200  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1f9338f  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1a80aea  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@16477d9  
[INFO ] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,569(1051) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@f864fe  
[INFO ] 2015-08-06 16:01:41,570(1052) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:41,570(1052) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1cda59b  
[INFO ] 2015-08-06 16:01:41,570(1052) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:41,570(1052) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:01:41,570(1052) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,570(1052) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:01:41,571(1053) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,571(1053) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@d9896e  
[INFO ] 2015-08-06 16:01:41,571(1053) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:41,571(1053) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@2c17f7  
[INFO ] 2015-08-06 16:01:41,571(1053) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:41,573(1055) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 16:01:41,574(1056) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 16:01:41,586(1068) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[WARN ] 2015-08-06 16:01:41,591(1073) org.hibernate.id.UUIDHexGenerator.<init>(UUIDHexGenerator.java:58) –> [main] Using org.hibernate.shards.id.ShardedUUIDGenerator which does not generate IETF RFC 4122 compliant UUID values; consider using org.hibernate.id.UUIDGenerator instead  
[DEBUG] 2015-08-06 16:01:41,721(1203) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:01:41,721(1203) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 16:01:41,721(1203) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 16:01:41,721(1203) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:01:41,721(1203) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 16:01:41,722(1204) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 16:01:41,746(1228) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,747(1229) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,747(1229) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,747(1229) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,748(1230) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,748(1230) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 16:01:41,748(1230) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,748(1230) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,749(1231) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,749(1231) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,756(1238) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,757(1239) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,781(1263) org.hibernate.impl.SessionFactoryObjectFactory.<clinit>(SessionFactoryObjectFactory.java:61) –> [main] initializing class SessionFactoryObjectFactory  
[DEBUG] 2015-08-06 16:01:41,782(1264) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: 2d8cdad5-211f-4986-b871-838492636382 (unnamed)  
[INFO ] 2015-08-06 16:01:41,782(1264) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 16:01:41,782(1264) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 16:01:41,788(1270) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 16:01:41,788(1270) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 16:01:41,789(1271) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:01:41,790(1272) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:01:41,791(1273) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:01:41,791(1273) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:01:41,791(1273) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:01:41,792(1274) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:01:41,792(1274) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:01:41,793(1275) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 16:01:41,817(1299) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards.anno_contact  
[INFO ] 2015-08-06 16:01:41,818(1300) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 16:01:41,818(1300) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 16:01:41,818(1300) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 16:01:41,818(1300) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 16:01:41,818(1300) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 16:01:41,821(1303) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 16:01:41,821(1303) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 16:01:41,822(1304) org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854) –> [main] Preparing to build session factory with filters : {}  
[DEBUG] 2015-08-06 16:01:41,822(1304) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:01:41,822(1304) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:01:41,822(1304) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:01:41,822(1304) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,822(1304) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,823(1305) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:01:41,823(1305) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:01:41,823(1305) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:01:41,823(1305) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:01:41,824(1306) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:01:41,824(1306) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:01:41,824(1306) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:01:41,825(1307) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:01:41,833(1315) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 16:01:41,834(1316) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:01:41,834(1316) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:01:41,835(1317) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:01:41,838(1320) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:01:41,840(1322) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 16:01:41,840(1322) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 16:01:41,840(1322) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 16:01:41,840(1322) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 16:01:41,841(1323) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 16:01:41,841(1323) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 16:01:41,841(1323) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=1}  
[DEBUG] 2015-08-06 16:01:41,841(1323) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 16:01:41,860(1342) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards2, Isolation Level: 4  
[INFO ] 2015-08-06 16:01:41,861(1343) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 16:01:41,861(1343) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 16:01:41,861(1343) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 16:01:41,862(1344) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:01:41,863(1345) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 16:01:41,864(1346) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 16:01:41,865(1347) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 16:01:41,865(1347) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 16:01:41,865(1347) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 16:01:41,865(1347) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 16:01:41,868(1350) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[WARN ] 2015-08-06 16:01:41,869(1351) org.hibernate.type.TypeFactory$TypeScopeImpl.injectSessionFactory(TypeFactory.java:69) –> [main] Scoping types to session factory org.hibernate.impl.SessionFactoryImpl@1ed27e4 after already scoped org.hibernate.impl.SessionFactoryImpl@813bc1  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:01:41,869(1351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:01:41,870(1352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:41,871(1353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:41,872(1354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:01:41,872(1354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:41,872(1354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:41,872(1354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:01:41,872(1354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:41,872(1354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:41,873(1355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:01:41,873(1355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:41,873(1355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:01:41,873(1355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:41,873(1355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:01:41,873(1355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:01:41,874(1356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:01:41,875(1357) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:01:41,876(1358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:41,876(1358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:01:41,876(1358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:41,876(1358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:01:41,876(1358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:41,876(1358) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:01:41,877(1359) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:41,878(1360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:41,878(1360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:01:41,878(1360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:41,878(1360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:41,878(1360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:01:41,878(1360) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:01:41,879(1361) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:01:41,880(1362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,880(1362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,880(1362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:41,880(1362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:41,880(1362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,880(1362) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:01:41,881(1363) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@19646fd  
[DEBUG] 2015-08-06 16:01:41,882(1364) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@e2433b  
[DEBUG] 2015-08-06 16:01:41,882(1364) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@abe654  
[DEBUG] 2015-08-06 16:01:41,882(1364) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@19ea173  
[DEBUG] 2015-08-06 16:01:41,882(1364) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@179a49f  
[DEBUG] 2015-08-06 16:01:41,882(1364) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1270107  
[DEBUG] 2015-08-06 16:01:41,882(1364) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1ce663c  
[DEBUG] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@19a0feb  
[DEBUG] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@16477d9  
[INFO ] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:01:41,883(1365) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@f864fe  
[INFO ] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1cda59b  
[INFO ] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,884(1366) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:01:41,885(1367) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:01:41,885(1367) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@d9896e  
[INFO ] 2015-08-06 16:01:41,885(1367) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:01:41,885(1367) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@2c17f7  
[INFO ] 2015-08-06 16:01:41,885(1367) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:01:41,886(1368) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 16:01:41,886(1368) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=1, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 16:01:41,887(1369) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[DEBUG] 2015-08-06 16:01:41,889(1371) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:01:41,889(1371) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 16:01:41,889(1371) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 16:01:41,889(1371) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:01:41,889(1371) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 16:01:41,889(1371) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 16:01:41,890(1372) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,890(1372) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,890(1372) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,891(1373) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,891(1373) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,891(1373) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 16:01:41,891(1373) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,892(1374) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:01:41,892(1374) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,892(1374) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,893(1375) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,893(1375) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:41,893(1375) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: 3977b835-4cc8-424c-94b1-180f621d2eac (unnamed)  
[INFO ] 2015-08-06 16:01:41,893(1375) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 16:01:41,893(1375) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 16:01:41,893(1375) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 16:01:41,894(1376) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 16:01:41,894(1376) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 16:01:41,894(1376) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:01:41,894(1376) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:01:41,894(1376) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:01:41,895(1377) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,895(1377) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:01:41,895(1377) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:01:41,895(1377) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:01:41,895(1377) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:01:41,895(1377) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:01:41,896(1378) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:01:41,896(1378) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:01:41,897(1379) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:01:41,897(1379) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 16:01:41,910(1392) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards2.anno_contact  
[INFO ] 2015-08-06 16:01:41,910(1392) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 16:01:41,910(1392) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 16:01:41,910(1392) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 16:01:41,911(1393) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 16:01:41,911(1393) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 16:01:41,912(1394) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 16:01:41,912(1394) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 16:01:41,992(1474) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388481019  
[DEBUG] 2015-08-06 16:01:42,035(1517) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:01:42,045(1527) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 16:01:42,045(1527) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:01:42,075(1557) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 16:01:42,094(1576) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 16:01:42,099(1581) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 16:01:42,099(1581) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 16:01:42,104(1586) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 16:01:42,108(1590) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 16:01:42,108(1590) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 16:01:42,109(1591) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 16:01:42,109(1591) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:01:42,127(1609) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:01:42,127(1609) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:01:42,127(1609) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:01:42,141(1623) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,141(1623) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:01:42,142(1624) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:01:42,157(1639) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,158(1640) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,158(1640) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,159(1641) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:01:42,165(1647) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:01:42,165(1647) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:01:42,165(1647) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388481021  
[DEBUG] 2015-08-06 16:01:42,166(1648) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:01:42,168(1650) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 16:01:42,168(1650) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:01:42,169(1651) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 16:01:42,170(1652) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 16:01:42,171(1653) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 16:01:42,171(1653) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 16:01:42,171(1653) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 16:01:42,172(1654) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 16:01:42,172(1654) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 16:01:42,172(1654) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 16:01:42,173(1655) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:01:42,173(1655) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:01:42,173(1655) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:01:42,173(1655) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:01:42,174(1656) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,174(1656) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:01:42,174(1656) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:01:42,175(1657) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,175(1657) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,175(1657) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,175(1657) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:01:42,175(1657) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:01:42,175(1657) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:01:42,180(1662) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#1]  
[DEBUG] 2015-08-06 16:01:42,180(1662) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,180(1662) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:01:42,181(1663) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:42,183(1665) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,183(1665) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,183(1665) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,183(1665) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:01:42,183(1665) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 16:01:42,183(1665) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:01:42,184(1666) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:01:42,184(1666) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#2]  
[DEBUG] 2015-08-06 16:01:42,184(1666) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,184(1666) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:01:42,184(1666) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:01:42,185(1667) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:01:42,185(1667) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,185(1667) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:01:42,186(1668) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:01:42,186(1668) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 16:01:42,186(1668) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:01:42,186(1668) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[INFO ] 2015-08-06 16:01:42,187(1669) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 16:01:42,187(1669) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 16:01:42,189(1671) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 16:01:42,189(1671) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:03:41,687(0) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:41,691(4) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:41,693(6) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:41,694(7) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:03:41,696(9) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:03:41,696(9) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:03:41,699(12) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:41,699(12) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:41,700(13) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:41,701(14) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:41,702(15) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:41,702(15) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:41,710(23) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:41,711(24) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:41,711(24) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:41,713(26) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:41,715(28) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:41,715(28) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:41,717(30) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:41,717(30) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:41,717(30) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:41,720(33) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:41,721(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:41,721(34) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:41,723(36) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:41,724(37) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:41,724(37) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:41,727(40) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:41,727(40) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:41,730(43) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:41,730(43) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:41,732(45) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:41,732(45) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:41,733(46) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:41,733(46) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:41,736(49) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:41,736(49) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:41,738(51) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:41,739(52) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:41,741(54) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:41,741(54) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:41,741(54) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:41,743(56) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:03:41,744(57) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:41,745(58) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:41,745(58) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:41,746(59) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:03:41,747(60) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:41,748(61) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:41,750(63) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:41,750(63) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:41,751(64) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:41,751(64) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:41,752(65) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:41,753(66) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:41,756(69) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:41,756(69) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:41,757(70) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:03:41,758(71) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:03:41,761(74) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:41,761(74) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:41,761(74) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:41,762(75) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:41,763(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:41,763(76) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:41,764(77) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:03:41,765(78) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:41,765(78) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:41,765(78) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:41,767(80) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:41,767(80) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:41,767(80) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:41,768(81) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:03:41,777(90) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:41,778(91) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:41,778(91) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:41,779(92) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:41,784(97) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:41,784(97) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:41,785(98) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:41,785(98) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:41,787(100) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:41,788(101) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:03:41,794(107) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:41,794(107) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:41,794(107) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1b8f864  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@bb7759  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@1989f84  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@110c424  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1bd2664  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1238bd2  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@b0bad7  
[DEBUG] 2015-08-06 16:03:41,795(108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@ba9340  
[DEBUG] 2015-08-06 16:03:41,835(148) org.hibernate.annotations.common.util.impl.LoggerFactory.make(LoggerFactory.java:33) –> [main] Logging Provider: org.jboss.logging.Log4jLoggerProvider  
[INFO ] 2015-08-06 16:03:41,838(151) org.hibernate.annotations.common.reflection.java.JavaReflectionManager.<clinit>(JavaReflectionManager.java:66) –> [main] HCANN000001: Hibernate Commons Annotations {4.0.4.Final}  
[INFO ] 2015-08-06 16:03:41,845(158) org.hibernate.cfg.Environment.<clinit>(Environment.java:603) –> [main] Hibernate 3.6.6.Final  
[INFO ] 2015-08-06 16:03:41,846(159) org.hibernate.cfg.Environment.<clinit>(Environment.java:636) –> [main] hibernate.properties not found  
[INFO ] 2015-08-06 16:03:41,850(163) org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:814) –> [main] Bytecode provider name : javassist  
[INFO ] 2015-08-06 16:03:41,854(167) org.hibernate.cfg.Environment.<clinit>(Environment.java:695) –> [main] using JDK 1.4 java.sql.Timestamp handling  
[DEBUG] 2015-08-06 16:03:41,910(223) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:03:41,911(224) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:03:41,912(225) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:03:41,912(225) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:03:41,913(226) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:03:41,914(227) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:03:41,915(228) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:03:41,915(228) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:03:41,916(229) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:03:41,916(229) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:03:41,917(230) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:03:41,917(230) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:03:41,918(231) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:03:41,919(232) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:03:41,920(233) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:03:41,922(235) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard0.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:03:41,923(236) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard0.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:03:41,976(289) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:03:41,976(289) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:03:41,977(290) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:03:41,977(290) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:03:41,999(312) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:03:41,999(312) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:03:41,999(312) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:03:42,000(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:03:42,000(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.pool_size=10  
[DEBUG] 2015-08-06 16:03:42,000(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:03:42,000(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:03:42,000(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hbm2ddl.auto=update  
[DEBUG] 2015-08-06 16:03:42,000(313) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=0  
[DEBUG] 2015-08-06 16:03:42,001(314) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:03:42,001(314) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:03:42,001(314) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.show_sql=true, hibernate.connection.pool_size=10}  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,007(320) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,008(321) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,009(322) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:42,010(323) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:03:42,011(324) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,012(325) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,012(325) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:42,013(326) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,014(327) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,015(328) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:42,016(329) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@16f25a7  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@110c31  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13785d3  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@32efa7  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@13f991  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@165a3c2  
[DEBUG] 2015-08-06 16:03:42,017(330) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e228bc  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@e06940  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:03:42,018(331) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:03:42,019(332) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:03:42,019(332) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard0.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:03:42,019(332) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard0.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:03:42,026(339) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:03:42,026(339) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:03:42,026(339) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:03:42,027(340) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.pool_size=10  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:03:42,030(343) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:03:42,031(344) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hbm2ddl.auto=update  
[DEBUG] 2015-08-06 16:03:42,031(344) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=0  
[DEBUG] 2015-08-06 16:03:42,031(344) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:03:42,031(344) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:03:42,031(344) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.show_sql=true, hibernate.connection.pool_size=10}  
[DEBUG] 2015-08-06 16:03:42,032(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,032(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,032(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,032(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:03:42,032(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:03:42,032(345) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,033(346) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,034(347) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:42,035(348) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:42,036(349) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:42,037(350) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:42,038(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:42,038(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:42,038(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:42,038(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:42,038(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:42,038(351) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:42,039(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:42,039(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:03:42,039(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:03:42,039(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,039(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,039(352) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,040(353) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:42,041(354) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:42,042(355) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@195d4fe  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1d2b01b  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@127fa12  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@192c8d9  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1c05ffd  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@de1b8a  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e232b5  
[DEBUG] 2015-08-06 16:03:42,043(356) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@16f144c  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]  
[DEBUG] 2015-08-06 16:03:42,044(357) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]  
[DEBUG] 2015-08-06 16:03:42,045(358) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:100) –> [main] Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]  
[INFO ] 2015-08-06 16:03:42,045(358) org.hibernate.cfg.Configuration.configure(Configuration.java:2156) –> [main] configuring from resource: annotation/shard1.hibernate.cfg.xml  
[INFO ] 2015-08-06 16:03:42,046(359) org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2175) –> [main] Configuration resource: annotation/shard1.hibernate.cfg.xml  
[DEBUG] 2015-08-06 16:03:42,047(360) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:67) –> [main] trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]  
[WARN ] 2015-08-06 16:03:42,047(360) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:73) –> [main] recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!  
[DEBUG] 2015-08-06 16:03:42,047(360) org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:77) –> [main] attempting to resolve on classpath under org/hibernate/  
[DEBUG] 2015-08-06 16:03:42,048(361) org.hibernate.util.DTDEntityResolver.resolveOnClassPath(DTDEntityResolver.java:109) –> [main] located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.driver_class=com.mysql.jdbc.Driver  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.url=jdbc:mysql://localhost/hbshards2  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.username=root  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] connection.password=root  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] show_sql=true  
[DEBUG] 2015-08-06 16:03:42,051(364) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] dialect=org.hibernate.dialect.MySQLDialect  
[DEBUG] 2015-08-06 16:03:42,052(365) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.connection.shard_id=1  
[DEBUG] 2015-08-06 16:03:42,052(365) org.hibernate.cfg.Configuration.addProperties(Configuration.java:2118) –> [main] hibernate.shard.enable_cross_shard_relationship_checks=false  
[INFO ] 2015-08-06 16:03:42,052(365) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2297) –> [main] Configured SessionFactory: null  
[DEBUG] 2015-08-06 16:03:42,052(365) org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2298) –> [main] properties: {hibernate.connection.password=root, java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, java.vm.version=20.2-b06, hibernate.connection.username=root, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) Client VM, file.encoding.pkg=sun.io, user.country=CN, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=Service Pack 1, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, java.runtime.version=1.6.0_27-b07, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hibernate.connection.shard_id=1, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, os.arch=x86, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, hibernate.shard.enable_cross_shard_relationship_checks=false, sun.jnu.encoding=GBK, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.specification.name=Java Platform API Specification, java.class.version=50.0, sun.management.compiler=HotSpot Client Compiler, os.version=6.1, connection.password=root, user.home=C:\Users\Administrator, user.timezone=Asia/Shanghai, connection.username=root, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.driver_class=com.mysql.jdbc.Driver, show_sql=true, user.name=Administrator, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.show_sql=true, java.vm.specification.version=1.0, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.home=D:\__JAVA__\jre6.0, sun.arch.data.model=32, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, user.language=zh, java.specification.vendor=Sun Microsystems Inc., awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_27, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, java.vendor=Sun Microsystems Inc., connection.driver_class=com.mysql.jdbc.Driver, file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, connection.url=jdbc:mysql://localhost/hbshards2, dialect=org.hibernate.dialect.MySQLDialect, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86}  
[DEBUG] 2015-08-06 16:03:42,075(388) org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854) –> [main] Preparing to build session factory with filters : {}  
[DEBUG] 2015-08-06 16:03:42,125(438) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:03:42,125(438) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[INFO ] 2015-08-06 16:03:42,130(443) org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:532) –> [main] Binding entity from annotated class: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:42,164(477) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}  
[DEBUG] 2015-08-06 16:03:42,167(480) org.hibernate.cfg.AnnotationBinder.determineSharedCacheMode(AnnotationBinder.java:1019) –> [main] no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED  
[DEBUG] 2015-08-06 16:03:42,174(487) org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) –> [main] Import with entity name ContactEntity  
[INFO ] 2015-08-06 16:03:42,179(492) org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:530) –> [main] Bind entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity on table anno_contact  
[DEBUG] 2015-08-06 16:03:42,218(531) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=ID, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:03:42,224(537) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property id with lazy=false  
[DEBUG] 2015-08-06 16:03:42,227(540) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for id  
[DEBUG] 2015-08-06 16:03:42,229(542) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property id  
[DEBUG] 2015-08-06 16:03:42,235(548) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=EMAIL, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:03:42,236(549) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property email with lazy=false  
[DEBUG] 2015-08-06 16:03:42,236(549) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for email  
[DEBUG] 2015-08-06 16:03:42,236(549) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property email  
[DEBUG] 2015-08-06 16:03:42,236(549) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=LOGINid, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:03:42,237(550) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property loginId with lazy=false  
[DEBUG] 2015-08-06 16:03:42,237(550) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for loginId  
[DEBUG] 2015-08-06 16:03:42,237(550) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property loginId  
[DEBUG] 2015-08-06 16:03:42,238(551) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=NAME, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:03:42,238(551) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property name with lazy=false  
[DEBUG] 2015-08-06 16:03:42,238(551) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for name  
[DEBUG] 2015-08-06 16:03:42,238(551) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property name  
[DEBUG] 2015-08-06 16:03:42,239(552) org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:192) –> [main] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(anno_contact), mappingColumn=PASSWORD, insertable=true, updatable=true, unique=false}  
[DEBUG] 2015-08-06 16:03:42,239(552) org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:175) –> [main] binding property password with lazy=false  
[DEBUG] 2015-08-06 16:03:42,239(552) org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:303) –> [main] building SimpleValue for password  
[DEBUG] 2015-08-06 16:03:42,239(552) org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:255) –> [main] Building property password  
[DEBUG] 2015-08-06 16:03:42,242(555) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for id  
[DEBUG] 2015-08-06 16:03:42,242(555) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for email  
[DEBUG] 2015-08-06 16:03:42,242(555) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for loginId  
[DEBUG] 2015-08-06 16:03:42,242(555) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for name  
[DEBUG] 2015-08-06 16:03:42,242(555) org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:341) –> [main] Setting SimpleValue typeName for password  
[DEBUG] 2015-08-06 16:03:42,243(556) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:03:42,244(557) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:42,244(557) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:42,245(558) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:03:42,245(558) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:03:42,245(558) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:03:42,245(558) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[INFO ] 2015-08-06 16:03:42,250(563) org.hibernate.cfg.Configuration.applyHibernateValidatorLegacyConstraintsOnDDL(Configuration.java:1676) –> [main] Hibernate Validator not found: ignoring  
[INFO ] 2015-08-06 16:03:42,275(588) org.hibernate.validator.internal.util.Version.<clinit>(Version.java:27) –> [main] HV000001: Hibernate Validator 4.3.1.Final  
[DEBUG] 2015-08-06 16:03:42,285(598) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:03:42,287(600) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:03:42,290(603) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:03:42,295(608) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:03:42,367(680) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 16:03:42,367(680) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:03:42,368(681) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:03:42,368(681) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:03:42,368(681) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:03:42,374(687) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 16:03:42,374(687) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 16:03:42,381(694) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 16:03:42,381(694) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 16:03:42,381(694) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 16:03:42,389(702) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards  
[INFO ] 2015-08-06 16:03:42,389(702) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=0}  
[DEBUG] 2015-08-06 16:03:42,389(702) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 16:03:42,651(964) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards, Isolation Level: 4  
[INFO ] 2015-08-06 16:03:42,672(985) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 16:03:42,685(998) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 16:03:42,686(999) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 16:03:42,687(1000) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 16:03:42,688(1001) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 16:03:42,689(1002) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 16:03:42,689(1002) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 16:03:42,689(1002) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 16:03:42,689(1002) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 16:03:42,689(1002) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 16:03:42,695(1008) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 16:03:42,695(1008) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 16:03:42,695(1008) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 16:03:42,696(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 16:03:42,696(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 16:03:42,696(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 16:03:42,696(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 16:03:42,696(1009) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 16:03:42,696(1009) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:03:42,698(1011) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:03:42,698(1011) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 16:03:42,698(1011) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 16:03:42,698(1011) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 16:03:42,698(1011) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 16:03:42,698(1011) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 16:03:42,699(1012) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 16:03:42,699(1012) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 16:03:42,703(1016) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 16:03:42,703(1016) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 16:03:42,704(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 16:03:42,704(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 16:03:42,704(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 16:03:42,704(1017) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 16:03:42,719(1032) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 16:03:42,726(1039) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:03:42,795(1108) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,796(1109) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,797(1110) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:42,798(1111) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:42,799(1112) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:42,800(1113) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:03:42,801(1114) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:42,802(1115) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:42,803(1116) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1cc0a7f  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@c52200  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@3b4b1e  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@c0a9f9  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@d72200  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1f9338f  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1a80aea  
[DEBUG] 2015-08-06 16:03:42,804(1117) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@164b9b6  
[DEBUG] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@16477d9  
[INFO ] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@f864fe  
[INFO ] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1cda59b  
[INFO ] 2015-08-06 16:03:42,805(1118) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@d9896e  
[INFO ] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@2c17f7  
[INFO ] 2015-08-06 16:03:42,806(1119) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:42,809(1122) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 16:03:42,809(1122) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=0, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 16:03:42,820(1133) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[WARN ] 2015-08-06 16:03:42,825(1138) org.hibernate.id.UUIDHexGenerator.<init>(UUIDHexGenerator.java:58) –> [main] Using org.hibernate.shards.id.ShardedUUIDGenerator which does not generate IETF RFC 4122 compliant UUID values; consider using org.hibernate.id.UUIDGenerator instead  
[DEBUG] 2015-08-06 16:03:42,948(1261) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:42,948(1261) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 16:03:42,948(1261) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 16:03:42,948(1261) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:42,948(1261) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 16:03:42,949(1262) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 16:03:42,969(1282) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:42,969(1282) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:42,969(1282) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:42,969(1282) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:42,970(1283) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:42,970(1283) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 16:03:42,970(1283) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:42,971(1284) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:42,971(1284) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:42,971(1284) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:42,977(1290) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:42,978(1291) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:42,998(1311) org.hibernate.impl.SessionFactoryObjectFactory.<clinit>(SessionFactoryObjectFactory.java:61) –> [main] initializing class SessionFactoryObjectFactory  
[DEBUG] 2015-08-06 16:03:42,999(1312) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: 42b39301-0363-4901-8d80-0fa8116cfd09 (unnamed)  
[INFO ] 2015-08-06 16:03:42,999(1312) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 16:03:42,999(1312) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 16:03:43,006(1319) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 16:03:43,006(1319) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 16:03:43,008(1321) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 16:03:43,008(1321) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:03:43,008(1321) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:03:43,009(1322) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:03:43,009(1322) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:43,009(1322) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:43,009(1322) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:03:43,009(1322) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:03:43,009(1322) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:03:43,010(1323) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:03:43,010(1323) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:03:43,011(1324) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:03:43,011(1324) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:03:43,012(1325) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 16:03:43,037(1350) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards.anno_contact  
[INFO ] 2015-08-06 16:03:43,037(1350) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 16:03:43,037(1350) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 16:03:43,037(1350) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 16:03:43,037(1350) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 16:03:43,038(1351) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 16:03:43,041(1354) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 16:03:43,041(1354) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854) –> [main] Preparing to build session factory with filters : {}  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:03:43,043(1356) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:03:43,044(1357) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:03:43,044(1357) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:03:43,045(1358) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:03:43,045(1358) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:03:43,046(1359) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:03:43,050(1363) org.hibernate.cfg.Configuration.enableLegacyHibernateValidator(Configuration.java:1896) –> [main] Legacy Validator not present in classpath, ignoring event listener registration  
[DEBUG] 2015-08-06 16:03:43,050(1363) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:03:43,051(1364) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:03:43,051(1364) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:03:43,055(1368) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[DEBUG] 2015-08-06 16:03:43,057(1370) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener(HibernateSearchEventListenerRegister.java:231) –> [main] Search not present in classpath, ignoring event listener registration.  
[INFO ] 2015-08-06 16:03:43,057(1370) org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(HibernateSearchEventListenerRegister.java:75) –> [main] Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.  
[INFO ] 2015-08-06 16:03:43,057(1370) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:64) –> [main] Using Hibernate built-in connection pool (not for production use!)  
[INFO ] 2015-08-06 16:03:43,057(1370) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) –> [main] Hibernate connection pool size: 10  
[INFO ] 2015-08-06 16:03:43,057(1370) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:68) –> [main] autocommit mode: false  
[INFO ] 2015-08-06 16:03:43,057(1370) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:103) –> [main] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 16:03:43,058(1371) org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:106) –> [main] connection properties: {user=root, password=root, shard_id=1}  
[DEBUG] 2015-08-06 16:03:43,058(1371) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:132) –> [main] opening new JDBC connection  
[DEBUG] 2015-08-06 16:03:43,074(1387) org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:138) –> [main] created connection to: jdbc:mysql://localhost/hbshards2, Isolation Level: 4  
[INFO ] 2015-08-06 16:03:43,075(1388) org.hibernate.dialect.Dialect.<init>(Dialect.java:135) –> [main] Using dialect: org.hibernate.dialect.MySQLDialect  
[INFO ] 2015-08-06 16:03:43,075(1388) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:126) –> [main] Database ->
       name : MySQL
    version : 5.6.24
      major : 5
      minor : 6  
[INFO ] 2015-08-06 16:03:43,075(1388) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:132) –> [main] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.22 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1  
[INFO ] 2015-08-06 16:03:43,075(1388) org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:62) –> [main] Using default transaction strategy (direct JDBC transactions)  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:83) –> [main] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:179) –> [main] Automatic flush during beforeCompletion(): disabled  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:183) –> [main] Automatic session close at end of transaction: disabled  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:190) –> [main] JDBC batch size: 15  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:193) –> [main] JDBC batch updates for versioned data: disabled  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:198) –> [main] Scrollable result sets: enabled  
[DEBUG] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) –> [main] Wrap result sets: disabled  
[INFO ] 2015-08-06 16:03:43,076(1389) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) –> [main] JDBC3 getGeneratedKeys(): enabled  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:214) –> [main] Connection release mode: auto  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:238) –> [main] Maximum outer join fetch depth: 2  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:241) –> [main] Default batch fetch size: 1  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:245) –> [main] Generate SQL with comments: disabled  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:249) –> [main] Order SQL updates by primary key: disabled  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:253) –> [main] Order SQL inserts for batching: disabled  
[INFO ] 2015-08-06 16:03:43,077(1390) org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:431) –> [main] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:47) –> [main] Using ASTQueryTranslatorFactory  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:261) –> [main] Query language substitutions: {}  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:266) –> [main] JPA-QL strict compliance: disabled  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:271) –> [main] Second-level cache: enabled  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:275) –> [main] Query cache: disabled  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:406) –> [main] Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory  
[INFO ] 2015-08-06 16:03:43,078(1391) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:285) –> [main] Optimize cache for minimal puts: disabled  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) –> [main] Structured second-level cache entries: disabled  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:314) –> [main] Echoing all SQL to stdout  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) –> [main] Statistics: disabled  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:327) –> [main] Deleted entity synthetic identifier rollback: disabled  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:343) –> [main] Default entity-mode: pojo  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:347) –> [main] Named query checking : enabled  
[INFO ] 2015-08-06 16:03:43,079(1392) org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:351) –> [main] Check Nullability in Core (should be disabled when Bean Validation is on): disabled  
[INFO ] 2015-08-06 16:03:43,083(1396) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:202) –> [main] building session factory  
[DEBUG] 2015-08-06 16:03:43,084(1397) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:206) –> [main] Statistics initialized [enabled=false]}  
[WARN ] 2015-08-06 16:03:43,084(1397) org.hibernate.type.TypeFactory$TypeScopeImpl.injectSessionFactory(TypeFactory.java:69) –> [main] Scoping types to session factory org.hibernate.impl.SessionFactoryImpl@d61aef after already scoped org.hibernate.impl.SessionFactoryImpl@7a36a2  
[DEBUG] 2015-08-06 16:03:43,084(1397) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:43,084(1397) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:43,084(1397) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@1922221  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c832d2  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration true_false -> org.hibernate.type.TrueFalseType@166a22b  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration yes_no -> org.hibernate.type.YesNoType@47393f  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@13a317a  
[DEBUG] 2015-08-06 16:03:43,085(1398) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@14a8cd1  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1c9b9ca  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:43,086(1399) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration int -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@ce5b1c  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Long -> org.hibernate.type.LongType@d08633  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:43,087(1400) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1543c88  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1592174  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1f3aa07  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:43,088(1401) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77a7f9  
[DEBUG] 2015-08-06 16:03:43,089(1402) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration string -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:43,089(1402) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.String -> org.hibernate.type.StringType@1a33d48  
[DEBUG] 2015-08-06 16:03:43,089(1402) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration url -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:43,089(1402) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a4983  
[DEBUG] 2015-08-06 16:03:43,089(1402) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:43,089(1402) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Date -> org.hibernate.type.DateType@1e13d52  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Time -> org.hibernate.type.TimeType@166aa18  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Date -> org.hibernate.type.TimestampType@107ebe1  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1968e23  
[DEBUG] 2015-08-06 16:03:43,090(1403) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@78a212  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@641e9a  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@10e3293  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:43,091(1404) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@27e353  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration timezone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10f6d3  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Class -> org.hibernate.type.ClassType@10e790c  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1c9a690  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@13ad085  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@1faba46  
[DEBUG] 2015-08-06 16:03:43,092(1405) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration binary -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration byte[] -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [B -> org.hibernate.type.BinaryType@1c74f37  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79717e  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration image -> org.hibernate.type.ImageType@89cf1e  
[DEBUG] 2015-08-06 16:03:43,093(1406) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:43,094(1407) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration char[] -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:43,094(1407) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [C -> org.hibernate.type.CharArrayType@c88440  
[DEBUG] 2015-08-06 16:03:43,094(1407) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:43,094(1407) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:43,094(1407) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@cfec48  
[DEBUG] 2015-08-06 16:03:43,094(1407) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration text -> org.hibernate.type.TextType@10da5eb  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:43,095(1408) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration serializable -> org.hibernate.type.SerializableType@4cee32  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1394894  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@10ebe18  
[DEBUG] 2015-08-06 16:03:43,096(1409) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@e2433b  
[DEBUG] 2015-08-06 16:03:43,097(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@179a49f  
[DEBUG] 2015-08-06 16:03:43,097(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1270107  
[DEBUG] 2015-08-06 16:03:43,097(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1b48392  
[DEBUG] 2015-08-06 16:03:43,097(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@29ea31  
[DEBUG] 2015-08-06 16:03:43,097(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1ce663c  
[DEBUG] 2015-08-06 16:03:43,097(1410) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@19a0feb  
[DEBUG] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@16477d9  
[INFO ] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@2a15cd  
[DEBUG] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@10e434d  
[INFO ] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@12bb7e0  
[DEBUG] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@f864fe  
[INFO ] 2015-08-06 16:03:43,098(1411) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@e45076  
[DEBUG] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1cda59b  
[INFO ] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@ca0115  
[DEBUG] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1ae9aaa  
[INFO ] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@4aeb52  
[DEBUG] 2015-08-06 16:03:43,099(1412) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@d9896e  
[INFO ] 2015-08-06 16:03:43,100(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@f1bb78  
[DEBUG] 2015-08-06 16:03:43,100(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:147) –> [main] Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@2c17f7  
[INFO ] 2015-08-06 16:03:43,100(1413) org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:150) –> [main] Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@12a3793  
[DEBUG] 2015-08-06 16:03:43,100(1413) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:228) –> [main] Session factory constructed with filter configurations : {}  
[DEBUG] 2015-08-06 16:03:43,101(1414) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:232) –> [main] instantiating session factory with properties: {java.vendor=Sun Microsystems Inc., show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost/hbshards2, sun.management.compiler=HotSpot Client Compiler, os.name=Windows 7, hbm2ddl.auto=update, sun.boot.class.path=D:\__JAVA__\jre6.0\lib\resources.jar;D:\__JAVA__\jre6.0\lib\rt.jar;D:\__JAVA__\jre6.0\lib\sunrsasign.jar;D:\__JAVA__\jre6.0\lib\jsse.jar;D:\__JAVA__\jre6.0\lib\jce.jar;D:\__JAVA__\jre6.0\lib\charsets.jar;D:\__JAVA__\jre6.0\lib\modules\jdk.boot.jar;D:\__JAVA__\jre6.0\classes, sun.desktop=windows, java.vm.specification.vendor=Sun Microsystems Inc., java.runtime.version=1.6.0_27-b07, user.name=Administrator, connection.driver_class=com.mysql.jdbc.Driver, user.language=zh, sun.boot.library.path=D:\__JAVA__\jre6.0\bin, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.6.0_27, user.timezone=Asia/Shanghai, sun.arch.data.model=32, java.endorsed.dirs=D:\__JAVA__\jre6.0\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=50.0, user.country=CN, connection.url=jdbc:mysql://localhost/hbshards, java.home=D:\__JAVA__\jre6.0, java.vm.info=mixed mode, os.version=6.1, path.separator=;, connection.password=root, java.vm.version=20.2-b06, hibernate.connection.password=root, user.variant=, hibernate.connection.shard_id=1, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, hibernate.check_nullability=false, hibernate.shard.enable_cross_shard_relationship_checks=false, user.home=C:\Users\Administrator, java.specification.vendor=Sun Microsystems Inc., hibernate.hbm2ddl.auto=update, java.library.path=D:\__JAVA__\jre6.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/__JAVA__/jdk1.7/bin/../jre/bin/server;D:/__JAVA__/jdk1.7/bin/../jre/bin;D:/__JAVA__/jdk1.7/bin/../jre/lib/amd64;D:\other\other\Sublime Text\SublimeText.exe;D:\other\other\MarkdownPad 2\MarkdownPad2.exe;D:\other\other\MongoDB\Server\3.0/bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;D:\__JAVA__\hadoop-2.7.0\hadoop-2.7.0\bin;C:\Program Files (x86)\Common Files\NetSarang;D:\__JAVA__\mysql-5.6\bin;D:\__JAVA__\jdk1.7\bin;D:\__JAVA__\jdk1.7\lib;D:\__JAVA__\jdk1.7\jre\lib;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\other\other\TortoiseSVN\bin;D:\other\other\Rational\common;D:\__JAVA__\__ENV__\eclipse;;., java.vendor.url=http://java.sun.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Sun Microsystems Inc., hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=cn.cjp.demo.hibernate.shards.annotation.Main, java.class.path=D:\other\Github\OpenDemo\demo-hibernate-shards\target\classes;D:\other\Github\OpenDemo\demo-hibernate-shards\lib\hibernate-shards.jar;D:\--maven--\repo\javax\servlet\jstl\1.1.2\jstl-1.1.2.jar;D:\--maven--\repo\taglibs\standard\1.1.2\standard-1.1.2.jar;D:\--maven--\repo\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;D:\--maven--\repo\org\springframework\spring-test\3.2.9.RELEASE\spring-test-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-core\3.2.9.RELEASE\spring-core-3.2.9.RELEASE.jar;D:\--maven--\repo\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;D:\--maven--\repo\com\thoughtworks\xstream\xstream\1.4.3\xstream-1.4.3.jar;D:\--maven--\repo\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;D:\--maven--\repo\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-core-asl\1.9.12\jackson-core-asl-1.9.12.jar;D:\--maven--\repo\org\codehaus\jackson\jackson-mapper-asl\1.9.12\jackson-mapper-asl-1.9.12.jar;D:\--maven--\repo\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;D:\--maven--\repo\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;D:\--maven--\repo\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;D:\--maven--\repo\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;D:\--maven--\repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;D:\--maven--\repo\org\json\json\20080701\json-20080701.jar;D:\--maven--\repo\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\--maven--\repo\mysql\mysql-connector-java\5.1.22\mysql-connector-java-5.1.22.jar;D:\--maven--\repo\org\aspectj\aspectjweaver\1.7.4\aspectjweaver-1.7.4.jar;D:\--maven--\repo\org\springframework\spring-web\3.2.9.RELEASE\spring-web-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-aop\3.2.9.RELEASE\spring-aop-3.2.9.RELEASE.jar;D:\--maven--\repo\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;D:\--maven--\repo\org\springframework\spring-beans\3.2.9.RELEASE\spring-beans-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-context\3.2.9.RELEASE\spring-context-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-expression\3.2.9.RELEASE\spring-expression-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-orm\3.2.9.RELEASE\spring-orm-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-jdbc\3.2.9.RELEASE\spring-jdbc-3.2.9.RELEASE.jar;D:\--maven--\repo\org\springframework\spring-tx\3.2.9.RELEASE\spring-tx-3.2.9.RELEASE.jar;D:\--maven--\repo\org\hibernate\hibernate-entitymanager\4.3.4.Final\hibernate-entitymanager-4.3.4.Final.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;D:\--maven--\repo\org\jboss\logging\jboss-logging-annotations\1.2.0.Beta1\jboss-logging-annotations-1.2.0.Beta1.jar;D:\--maven--\repo\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;D:\--maven--\repo\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;D:\--maven--\repo\org\hibernate\common\hibernate-commons-annotations\4.0.4.Final\hibernate-commons-annotations-4.0.4.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;D:\--maven--\repo\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.0.Final\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;D:\--maven--\repo\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;D:\--maven--\repo\org\hibernate\hibernate-validator\4.3.1.Final\hibernate-validator-4.3.1.Final.jar;D:\--maven--\repo\org\hibernate\hibernate-core\3.6.6.Final\hibernate-core-3.6.6.Final.jar;D:\--maven--\repo\antlr\antlr\2.7.6\antlr-2.7.6.jar;D:\--maven--\repo\commons-collections\commons-collections\3.1\commons-collections-3.1.jar;D:\--maven--\repo\org\hibernate\hibernate-commons-annotations\3.2.0.Final\hibernate-commons-annotations-3.2.0.Final.jar;D:\--maven--\repo\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;D:\--maven--\repo\javax\transaction\jta\1.1\jta-1.1.jar;D:\--maven--\repo\org\hibernate\hibernate-annotations\3.5.6-Final\hibernate-annotations-3.5.6-Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.0, sun.cpu.endian=little, sun.os.patch.level=Service Pack 1, connection.pool_size=10, java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, os.arch=x86, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=D:\__JAVA__\jre6.0\lib\ext;C:\Windows\Sun\Java\lib\ext, user.dir=D:\other\Github\OpenDemo\demo-hibernate-shards, line.separator=
, java.vm.name=Java HotSpot(TM) Client VM, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.pool_size=10, hibernate.show_sql=true}  
[DEBUG] 2015-08-06 16:03:43,101(1414) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2952) –> [main] Static SQL for entity: cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2957) –> [main]  Version select: select ID from anno_contact where ID =?  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2960) –> [main]  Snapshot select: select contactent_.ID, contactent_.EMAIL as EMAIL0_, contactent_.LOGINid as LOGINid0_, contactent_.NAME as NAME0_, contactent_.PASSWORD as PASSWORD0_ from anno_contact contactent_ where contactent_.ID=?  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2963) –> [main]  Insert 0: insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2964) –> [main]  Update 0: update anno_contact set EMAIL=?, LOGINid=?, NAME=?, PASSWORD=? where ID=?  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:2965) –> [main]  Delete 0: delete from anno_contact where ID=?  
[DEBUG] 2015-08-06 16:03:43,103(1416) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [NONE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,104(1417) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,104(1417) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:43,104(1417) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [UPGRADE_NOWAIT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:43,104(1417) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [FORCE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:43,104(1417) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_READ]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? lock in share mode  
[DEBUG] 2015-08-06 16:03:43,105(1418) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_WRITE]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:43,105(1418) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [PESSIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=? for update  
[DEBUG] 2015-08-06 16:03:43,105(1418) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,105(1418) org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) –> [main] Static select for entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity [OPTIMISTIC_FORCE_INCREMENT]: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,106(1419) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_MERGE on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,106(1419) org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) –> [main] Static select for action ACTION_REFRESH on entity cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity: select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,106(1419) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:99) –> [main] registered: a2305da7-64a2-4f11-bc99-d5705d0cff62 (unnamed)  
[INFO ] 2015-08-06 16:03:43,106(1419) org.hibernate.impl.SessionFactoryObjectFactory.addInstance(SessionFactoryObjectFactory.java:105) –> [main] Not binding factory to JNDI, no JNDI name configured  
[DEBUG] 2015-08-06 16:03:43,106(1419) org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:369) –> [main] instantiated session factory  
[INFO ] 2015-08-06 16:03:43,106(1419) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:155) –> [main] Running hbm2ddl schema update  
[INFO ] 2015-08-06 16:03:43,107(1420) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:167) –> [main] fetching database metadata  
[INFO ] 2015-08-06 16:03:43,107(1420) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:179) –> [main] updating schema  
[DEBUG] 2015-08-06 16:03:43,107(1420) org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3995) –> [main] Processing hbm.xml files  
[DEBUG] 2015-08-06 16:03:43,107(1420) org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:4025) –> [main] Process annotated classes  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1466) –> [main] processing fk mappings (*ToOne and JoinedSubclass)  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1708) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1762) –> [main] processing extends queue  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1711) –> [main] processing collection mappings  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1721) –> [main] processing native query and ResultSetMapping mappings  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1729) –> [main] processing association property references  
[DEBUG] 2015-08-06 16:03:43,108(1421) org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1751) –> [main] processing foreign key constraints  
[DEBUG] 2015-08-06 16:03:43,109(1422) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:106) –> [main] Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver  
[DEBUG] 2015-08-06 16:03:43,109(1422) org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:117) –> [main] Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.  
[DEBUG] 2015-08-06 16:03:43,110(1423) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:184) –> [main] Trying to load META-INF/validation.xml for XML based Validator configuration.  
[DEBUG] 2015-08-06 16:03:43,110(1423) org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:187) –> [main] No META-INF/validation.xml found. Using annotation based configuration only.  
[INFO ] 2015-08-06 16:03:43,122(1435) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:65) –> [main] table found: hbshards2.anno_contact  
[INFO ] 2015-08-06 16:03:43,123(1436) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:66) –> [main] columns: [id, email, name, loginid, password]  
[INFO ] 2015-08-06 16:03:43,123(1436) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:68) –> [main] foreign keys: []  
[INFO ] 2015-08-06 16:03:43,123(1436) org.hibernate.tool.hbm2ddl.TableMetadata.<init>(TableMetadata.java:69) –> [main] indexes: [primary]  
[DEBUG] 2015-08-06 16:03:43,123(1436) org.hibernate.id.factory.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:90) –> [main] Setting dialect [org.hibernate.dialect.MySQLDialect]  
[INFO ] 2015-08-06 16:03:43,123(1436) org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:217) –> [main] schema update complete  
[DEBUG] 2015-08-06 16:03:43,124(1437) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:539) –> [main] Checking 0 named HQL queries  
[DEBUG] 2015-08-06 16:03:43,125(1438) org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:559) –> [main] Checking 0 named SQL queries  
[DEBUG] 2015-08-06 16:03:43,150(1463) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 1 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:43,151(1464) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 1  
[DEBUG] 2015-08-06 16:03:43,193(1506) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482231  
[DEBUG] 2015-08-06 16:03:43,194(1507) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 16:03:43,196(1509) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 16:03:43,196(1509) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,196(1509) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 16:03:43,204(1517) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 6493580361766862466693881630097408, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 16:03:43,217(1530) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 16:03:43,217(1530) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 16:03:43,217(1530) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 16:03:43,218(1531) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 16:03:43,220(1533) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 16:03:43,220(1533) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 16:03:43,221(1534) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 16:03:43,221(1534) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=6493580361766862466693881630097408, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 16:03:43,240(1553) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,240(1553) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:43,257(1570) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 16:03:43,258(1571) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,322(1635) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 16:03:43,322(1635) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,323(1636) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,325(1638) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 1 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:43,325(1638) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 1  
[DEBUG] 2015-08-06 16:03:43,325(1638) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482233  
[DEBUG] 2015-08-06 16:03:43,325(1638) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 6493580361766862466693881638289409, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 16:03:43,326(1639) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 16:03:43,327(1640) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 16:03:43,327(1640) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 16:03:43,327(1640) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 16:03:43,327(1640) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 16:03:43,327(1640) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=6493580361766862466693881638289409, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 16:03:43,327(1640) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,328(1641) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:43,328(1641) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 16:03:43,328(1641) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,411(1724) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 16:03:43,411(1724) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,411(1724) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 1 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 1  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482234  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 6493580361766862466693881643925506, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 16:03:43,412(1725) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=6493580361766862466693881643925506, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,413(1726) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:43,414(1727) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 16:03:43,415(1728) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,500(1813) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 16:03:43,500(1813) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,500(1813) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 1 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 1  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482235  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 16:03:43,501(1814) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 6493580361766862466693881649758211, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 16:03:43,502(1815) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=6493580361766862466693881649758211, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 16:03:43,503(1816) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,503(1816) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:43,503(1816) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 16:03:43,504(1817) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,552(1865) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 16:03:43,552(1865) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,552(1865) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.shards.session.ShardedSessionImpl.selectShardIdForNewObject(ShardedSessionImpl.java:669) –> [main] Selected shard 1 for object of type cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.shards.session.ShardedSessionImpl.save(ShardedSessionImpl.java:641) –> [main] Saving object of type class cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity to shard 1  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482235  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.shards.transaction.ShardedTransactionImpl.setupTransaction(ShardedTransactionImpl.java:71) –> [main] Setting up transaction  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:78) –> [main] begin  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:83) –> [main] current autocommit status: false  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) –> [main] generated identifier: 6493580361766862466693881653166084, using strategy: org.hibernate.shards.id.ShardedUUIDGenerator  
[DEBUG] 2015-08-06 16:03:43,553(1866) org.hibernate.shards.transaction.ShardedTransactionImpl.commit(ShardedTransactionImpl.java:119) –> [main] Starting transaction commit  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:130) –> [main] commit  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:134) –> [main] processing flush-time cascades  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.event.def.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:177) –> [main] dirty checking collections  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:108) –> [main] Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:114) –> [main] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.pretty.Printer.toString(Printer.java:106) –> [main] listing entities:  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.pretty.Printer.toString(Printer.java:113) –> [main] cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity{id=6493580361766862466693881653166084, loginId=RicCC@cnblogs.com, email=RicCC@cnblogs.com, name=Richie, password=123}  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,554(1867) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] insert into anno_contact (EMAIL, LOGINid, NAME, PASSWORD, ID) values (?, ?, ?, ?, ?)  
[DEBUG] 2015-08-06 16:03:43,555(1868) org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:66) –> [main] Executing batch size: 1  
[DEBUG] 2015-08-06 16:03:43,555(1868) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,601(1914) org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:143) –> [main] committed JDBC Connection  
[DEBUG] 2015-08-06 16:03:43,601(1914) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,601(1914) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,620(1933) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482236  
[DEBUG] 2015-08-06 16:03:43,677(1990) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:03:43,687(2000) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 16:03:43,687(2000) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:03:43,723(2036) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 16:03:43,740(2053) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 16:03:43,747(2060) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 16:03:43,747(2060) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 16:03:43,751(2064) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 16:03:43,755(2068) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 16:03:43,755(2068) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 16:03:43,756(2069) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 16:03:43,756(2069) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:03:43,770(2083) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:03:43,770(2083) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:03:43,770(2083) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:03:43,786(2099) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,786(2099) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,786(2099) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:03:43,787(2100) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,787(2100) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,787(2100) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,788(2101) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:03:43,789(2102) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,790(2103) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,790(2103) org.hibernate.impl.SessionImpl.<init>(SessionImpl.java:265) –> [main] opened session at timestamp: 14388482237  
[DEBUG] 2015-08-06 16:03:43,790(2103) org.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:272) –> [main] parse() - HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:03:43,792(2105) org.hibernate.hql.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:291) –> [main] --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  +-[DOT] Node: '.'
    |           |  |  |  |  |  |  +-[IDENT] Node: 'cn'
    |           |  |  |  |  |  |  \-[IDENT] Node: 'cjp'
    |           |  |  |  |  |  \-[IDENT] Node: 'demo'
    |           |  |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  |  \-[IDENT] Node: 'shards'
    |           |  |  \-[IDENT] Node: 'xml'
    |           |  \-[IDENT] Node: 'entity'
    |           \-[IDENT] Node: 'ContactEntity'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'LoginId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'loginId'
  
[DEBUG] 2015-08-06 16:03:43,792(2105) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:03:43,793(2106) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:111) –> [main] select << begin [level=1, statement=select]  
[DEBUG] 2015-08-06 16:03:43,793(2106) org.hibernate.hql.ast.tree.FromElement.doInitialize(FromElement.java:157) –> [main] FromClause{level=1} :  cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity (no alias) -> contactent0_  
[DEBUG] 2015-08-06 16:03:43,794(2107) org.hibernate.hql.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:117) –> [main] select : finishing up [level=1, statement=select]  
[DEBUG] 2015-08-06 16:03:43,795(2108) org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:625) –> [main] processQuery() :  ( SELECT ( FromClause{level=1} anno_contact contactent0_ ) ( where ( = LoginId ? ) ) )  
[DEBUG] 2015-08-06 16:03:43,795(2108) org.hibernate.hql.ast.HqlSqlWalker.createSelectClauseFromFromClause(HqlSqlWalker.java:868) –> [main] Derived SELECT clause created.  
[DEBUG] 2015-08-06 16:03:43,795(2108) org.hibernate.hql.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:179) –> [main] Using FROM fragment [anno_contact contactent0_]  
[DEBUG] 2015-08-06 16:03:43,795(2108) org.hibernate.hql.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:123) –> [main] select >> end [level=1, statement=select]  
[DEBUG] 2015-08-06 16:03:43,796(2109) org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:258) –> [main] --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (anno_contact)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'contactent0_.ID as ID0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}}
    |  \-[SQL_TOKEN] SqlFragment: 'contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[contactent0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'anno_contact contactent0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=anno_contact,tableAlias=contactent0_,origin=null,columns={,className=cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[IDENT] IdentNode: 'LoginId' {originalText=LoginId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=loginId, expectedType=null}
  
[DEBUG] 2015-08-06 16:03:43,796(2109) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:03:43,797(2110) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:241) –> [main] HQL: from cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity where LoginId=:loginId  
[DEBUG] 2015-08-06 16:03:43,797(2110) org.hibernate.hql.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:242) –> [main] SQL: select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:03:43,797(2110) org.hibernate.hql.ast.ErrorCounter.throwQueryException(ErrorCounter.java:91) –> [main] throwQueryException() : no errors  
[DEBUG] 2015-08-06 16:03:43,797(2110) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,797(2110) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,798(2111) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_, contactent0_.EMAIL as EMAIL0_, contactent0_.LOGINid as LOGINid0_, contactent0_.NAME as NAME0_, contactent0_.PASSWORD as PASSWORD0_ from anno_contact contactent0_ where LoginId=?  
[DEBUG] 2015-08-06 16:03:43,798(2111) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,799(2112) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,799(2112) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,799(2112) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:03:43,799(2112) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,799(2112) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,803(2116) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#1]  
[DEBUG] 2015-08-06 16:03:43,803(2116) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,803(2116) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,803(2116) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,805(2118) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[DEBUG] 2015-08-06 16:03:43,806(2119) org.hibernate.loader.Loader.loadEntity(Loader.java:2022) –> [main] loading entity: [cn.cjp.demo.hibernate.shards.xml.entity.ContactEntity#2]  
[DEBUG] 2015-08-06 16:03:43,806(2119) org.hibernate.jdbc.AbstractBatcher.logOpenPreparedStatement(AbstractBatcher.java:410) –> [main] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,806(2119) org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:444) –> [main] opening JDBC connection  
[DEBUG] 2015-08-06 16:03:43,806(2119) org.hibernate.jdbc.util.SQLStatementLogger.logStatement(SQLStatementLogger.java:111) –> [main] select contactent0_.ID as ID0_0_, contactent0_.EMAIL as EMAIL0_0_, contactent0_.LOGINid as LOGINid0_0_, contactent0_.NAME as NAME0_0_, contactent0_.PASSWORD as PASSWORD0_0_ from anno_contact contactent0_ where contactent0_.ID=?  
[DEBUG] 2015-08-06 16:03:43,808(2121) org.hibernate.jdbc.AbstractBatcher.logOpenResults(AbstractBatcher.java:426) –> [main] about to open ResultSet (open ResultSets: 0, globally: 0)  
[DEBUG] 2015-08-06 16:03:43,808(2121) org.hibernate.jdbc.AbstractBatcher.logCloseResults(AbstractBatcher.java:433) –> [main] about to close ResultSet (open ResultSets: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,808(2121) org.hibernate.jdbc.AbstractBatcher.logClosePreparedStatement(AbstractBatcher.java:418) –> [main] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)  
[DEBUG] 2015-08-06 16:03:43,808(2121) org.hibernate.engine.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:893) –> [main] initializing non-lazy collections  
[DEBUG] 2015-08-06 16:03:43,809(2122) org.hibernate.loader.Loader.loadEntity(Loader.java:2050) –> [main] done entity load  
[DEBUG] 2015-08-06 16:03:43,809(2122) org.hibernate.jdbc.ConnectionManager.aggressiveRelease(ConnectionManager.java:427) –> [main] aggressively releasing JDBC connection  
[DEBUG] 2015-08-06 16:03:43,809(2122) org.hibernate.jdbc.ConnectionManager.closeConnection(ConnectionManager.java:464) –> [main] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  
[INFO ] 2015-08-06 16:03:43,809(2122) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 16:03:43,809(2122) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards2  
[INFO ] 2015-08-06 16:03:43,811(2124) org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:927) –> [main] closing  
[INFO ] 2015-08-06 16:03:43,811(2124) org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:170) –> [main] cleaning up connection pool: jdbc:mysql://localhost/hbshards  
